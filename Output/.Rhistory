summarise(count = sum(WPFINWGT)) %>%
ungroup() %>% group_by(METRO_STATUS) %>%
mutate(share = count/sum(count)) %>%
select(-c(count)) %>%
pivot_wider(names_from = EDUCATION,
values_from = share) %>%
rename(`% with a BA+` = `Bachelor's degree or higher`,
`% with HS or less` = `High School or less`) %>%
select(-c(`Some college`))
edu
edu =   sipp_2023 %>%
ungroup() %>%
filter(!is.na(METRO_STATUS)) %>% filter(METRO_STATUS != "Not identified") %>%
group_by(METRO_STATUS, EDUCATION) %>%
summarise(count = sum(WPFINWGT)) %>%
ungroup() %>% group_by(METRO_STATUS) %>%
mutate(share = count/sum(count)) %>%
select(-c(count)) %>%
pivot_wider(names_from = EDUCATION,
values_from = share) %>%
rename(`% with HS or less` = `High School or less`) %>%
select(-c(`Some college`, `Bachelor's degree or higher`))
edu
edu =   sipp_2023 %>%
ungroup() %>%
filter(!is.na(METRO_STATUS)) %>% filter(METRO_STATUS != "Not identified") %>%
group_by(METRO_STATUS, EDUCATION) %>%
summarise(count = sum(WPFINWGT)) %>%
ungroup() %>% group_by(METRO_STATUS) %>%
mutate(share = 100*count/sum(count)) %>%
select(-c(count)) %>%
pivot_wider(names_from = EDUCATION,
values_from = share) %>%
rename(`% with HS or less` = `High School or less`) %>%
select(-c(`Some college`, `Bachelor's degree or higher`))
edu
sipp_2023 %>%
ungroup() %>%
filter(!is.na(METRO_STATUS)) %>% filter(METRO_STATUS != "Not identified") %>%
group_by(METRO_STATUS) %>%
summarise(`Mean age*` = weighted.mean(TAGE, weight = WPFINGWT))
age = sipp_2023 %>%
ungroup() %>%
filter(!is.na(METRO_STATUS)) %>% filter(METRO_STATUS != "Not identified") %>%
group_by(METRO_STATUS) %>%
summarise(`Mean age*` = weighted.mean(TAGE, weight = WPFINGWT))
stats = age %>% left_join(edu) %>% left_join(median_income)
stats
stats = median_income %>% left_join(edu)  %>% left_join(age)
stats
setwd(output_path)
write.csv(stats, "summary_stats_urban_rural_discrepancies.csv")
# what would low access industry be?
sipp_2023 %>%
ungroup() %>%
group_by(INDUSTRY_BROAD, ANY_RETIREMENT_ACCESS) %>%
filter(ANY_RETIREMENT_ACCESS!= "Missing") %>%
summarise(count = sum(WPFINWGT)) %>%
ungroup() %>%
group_by(INDUSTRY_BROAD) %>%
mutate(share = share/sum(count))
# what would low access industry be?
sipp_2023 %>%
ungroup() %>%
group_by(INDUSTRY_BROAD, ANY_RETIREMENT_ACCESS) %>%
filter(ANY_RETIREMENT_ACCESS!= "Missing") %>%
summarise(count = sum(WPFINWGT)) %>%
ungroup() %>%
group_by(INDUSTRY_BROAD) %>%
mutate(share = count/sum(count))
0.643+0.357
# what would low access industry be?
sipp_2023 %>%
ungroup() %>%
group_by(INDUSTRY_BROAD, ANY_RETIREMENT_ACCESS) %>%
filter(ANY_RETIREMENT_ACCESS!= "Missing") %>%
summarise(count = sum(WPFINWGT)) %>%
ungroup() %>%
group_by(INDUSTRY_BROAD) %>%
mutate(share = count/sum(count)) %>%
filter(ANY_RETIREMENT_ACCESS =="No")
# what would low access industry be?
sipp_2023 %>%
ungroup() %>%
group_by(INDUSTRY_BROAD, ANY_RETIREMENT_ACCESS) %>%
filter(ANY_RETIREMENT_ACCESS!= "Missing") %>%
summarise(count = sum(WPFINWGT)) %>%
ungroup() %>%
group_by(INDUSTRY_BROAD) %>%
mutate(share = count/sum(count)) %>%
filter(ANY_RETIREMENT_ACCESS =="No") %>%
select(-c(count, ANY_RETIREMENT_ACCESS))
# what would low access industry be?
sipp_2023 %>%
ungroup() %>%
group_by(INDUSTRY_BROAD, ANY_RETIREMENT_ACCESS) %>%
filter(ANY_RETIREMENT_ACCESS!= "Missing") %>%
summarise(count = sum(WPFINWGT)) %>%
ungroup() %>%
group_by(INDUSTRY_BROAD) %>%
mutate(share = count/sum(count)) %>%
filter(ANY_RETIREMENT_ACCESS =="No") %>%
select(-c(count, ANY_RETIREMENT_ACCESS)) %>%
arrange(dec(share))
# what would low access industry be?
sipp_2023 %>%
ungroup() %>%
group_by(INDUSTRY_BROAD, ANY_RETIREMENT_ACCESS) %>%
filter(ANY_RETIREMENT_ACCESS!= "Missing") %>%
summarise(count = sum(WPFINWGT)) %>%
ungroup() %>%
group_by(INDUSTRY_BROAD) %>%
mutate(share = count/sum(count)) %>%
filter(ANY_RETIREMENT_ACCESS =="No") %>%
select(-c(count, ANY_RETIREMENT_ACCESS)) %>%
arrange(desc(share))
# what would low access industry be?
sipp_2023 %>%
ungroup() %>%
group_by(INDUSTRY_BROAD, ANY_RETIREMENT_ACCESS) %>%
filter(ANY_RETIREMENT_ACCESS!= "Missing") %>%
summarise(count = sum(WPFINWGT)) %>%
ungroup() %>%
group_by(INDUSTRY_BROAD) %>%
mutate(share = count/sum(count)) %>%
filter(ANY_RETIREMENT_ACCESS =="Yes") %>%
select(-c(count, ANY_RETIREMENT_ACCESS)) %>%
arrange(desc(share))
# what would low access industry be?
sipp_2023 %>%
ungroup() %>%
group_by(INDUSTRY_BROAD, ANY_RETIREMENT_ACCESS) %>%
filter(ANY_RETIREMENT_ACCESS!= "Missing") %>%
summarise(count = sum(WPFINWGT)) %>%
ungroup() %>%
group_by(INDUSTRY_BROAD) %>%
mutate(share = count/sum(count)) %>%
filter(ANY_RETIREMENT_ACCESS =="Yes") %>%
select(-c(count, ANY_RETIREMENT_ACCESS)) %>%
arrange(desc(share))
# what would low access industry be?
sipp_2023 %>%
ungroup() %>%
group_by(INDUSTRY_BROAD, ANY_RETIREMENT_ACCESS) %>%
filter(ANY_RETIREMENT_ACCESS!= "Missing") %>%
summarise(count = sum(WPFINWGT)) %>%
ungroup() %>%
group_by(INDUSTRY_BROAD) %>%
mutate(share = count/sum(count)) %>%
filter(ANY_RETIREMENT_ACCESS =="Yes") %>%
select(-c(count, ANY_RETIREMENT_ACCESS)) %>%
arrange(desc(share)) %>%
# let's say low-access is <40% has access to retirement plan.
filter(share <0.4)
# what would low access industry be?
sipp_2023 %>%
ungroup() %>%
group_by(INDUSTRY_BROAD, ANY_RETIREMENT_ACCESS) %>%
filter(ANY_RETIREMENT_ACCESS!= "Missing") %>%
summarise(count = sum(WPFINWGT)) %>%
ungroup() %>%
group_by(INDUSTRY_BROAD) %>%
mutate(share = count/sum(count)) %>%
filter(ANY_RETIREMENT_ACCESS =="Yes") %>%
select(-c(count, ANY_RETIREMENT_ACCESS)) %>%
arrange(desc(share))
4/13
# what would low access industry be?
sipp_2023 %>%
ungroup() %>%
group_by(INDUSTRY_BROAD, ANY_RETIREMENT_ACCESS) %>%
filter(ANY_RETIREMENT_ACCESS!= "Missing") %>%
summarise(count = sum(WPFINWGT)) %>%
ungroup() %>%
group_by(INDUSTRY_BROAD) %>%
mutate(share = count/sum(count)) %>%
filter(ANY_RETIREMENT_ACCESS =="Yes") %>%
select(-c(count, ANY_RETIREMENT_ACCESS)) %>%
arrange(desc(share)) %>%
# define low-access to be the 70th percentile
%>%
# what would low access industry be?
sipp_2023 %>%
ungroup() %>%
group_by(INDUSTRY_BROAD, ANY_RETIREMENT_ACCESS) %>%
filter(ANY_RETIREMENT_ACCESS!= "Missing") %>%
summarise(count = sum(WPFINWGT)) %>%
ungroup() %>%
group_by(INDUSTRY_BROAD) %>%
mutate(share = count/sum(count)) %>%
filter(ANY_RETIREMENT_ACCESS =="Yes") %>%
select(-c(count, ANY_RETIREMENT_ACCESS)) %>%
arrange(desc(share)) %>%
# define low-access to be the 70th percentile
filter(share < 45)
# what would low access industry be?
sipp_2023 %>%
ungroup() %>%
group_by(INDUSTRY_BROAD, ANY_RETIREMENT_ACCESS) %>%
filter(ANY_RETIREMENT_ACCESS!= "Missing") %>%
summarise(count = sum(WPFINWGT)) %>%
ungroup() %>%
group_by(INDUSTRY_BROAD) %>%
mutate(share = count/sum(count)) %>%
filter(ANY_RETIREMENT_ACCESS =="Yes") %>%
select(-c(count, ANY_RETIREMENT_ACCESS)) %>%
arrange(desc(share)) %>%
# define low-access to be the 70th percentile
filter(share < .45)
# what would low access industry be?
sipp_2023 %>%
ungroup() %>%
group_by(INDUSTRY_BROAD, ANY_RETIREMENT_ACCESS) %>%
filter(ANY_RETIREMENT_ACCESS!= "Missing") %>%
summarise(count = sum(WPFINWGT)) %>%
ungroup() %>%
group_by(INDUSTRY_BROAD) %>%
mutate(share = count/sum(count)) %>%
filter(ANY_RETIREMENT_ACCESS =="Yes") %>%
select(-c(count, ANY_RETIREMENT_ACCESS)) %>%
arrange(desc(share)) %>%
# define low-access to be the 70th percentile
filter(share < .45)
# what would low access industry be?
low_access_list =  sipp_2023 %>%
ungroup() %>%
group_by(INDUSTRY_BROAD, ANY_RETIREMENT_ACCESS) %>%
filter(ANY_RETIREMENT_ACCESS!= "Missing") %>%
summarise(count = sum(WPFINWGT)) %>%
ungroup() %>%
group_by(INDUSTRY_BROAD) %>%
mutate(share = count/sum(count)) %>%
filter(ANY_RETIREMENT_ACCESS =="Yes") %>%
select(-c(count, ANY_RETIREMENT_ACCESS)) %>%
arrange(desc(share)) %>%
# define low-access to be the 70th percentile
filter(share < .45)
low_access_list = low_access_list$INDUSTRY_BROAD
low_access_list
low_access = sipp_2023 %>%
mutate(low_access_industry = case_when(
INDUSTRY_BROAD %in% low_access_list ~ "low access",
TRUE~ "not low access"
))
unique(low_access$INDUSTRY_BROAD, low_access$low_access_industry
unique(low_access$INDUSTRY_BROAD, low_access$low_access_industry)
unique(low_access$INDUSTRY_BROAD, low_access$low_access_industry)
unique(low_access$INDUSTRY_BROAD, low_access$low_access_industry)
table(low_access$INDUSTRY_BROAD, low_access$low_access_industry)
low_access = sipp_2023 %>%
mutate(low_access_industry = case_when(
INDUSTRY_BROAD %in% low_access_list ~ "low access",
TRUE~ "not low access"
)) %>%
filter(METRO_STATUS != "Not identified") %>%
ungroup() %>%
group_by(METRO_STATUS, low_access_industry) %>%
summarise(count = sum(WPFINWGT)) %>%
ungroup() %>% group_by(METRO_STATUS) %>%
summarise(share = count/sum(count))
low_access = sipp_2023 %>%
mutate(low_access_industry = case_when(
INDUSTRY_BROAD %in% low_access_list ~ "low access",
TRUE~ "not low access"
)) %>%
filter(METRO_STATUS != "Not identified") %>%
ungroup() %>%
group_by(METRO_STATUS, low_access_industry) %>%
summarise(count = sum(WPFINWGT)) %>%
ungroup() %>% group_by(METRO_STATUS) %>%
mutate(share = count/sum(count))
low_access
low_access = sipp_2023 %>%
mutate(low_access_industry = case_when(
INDUSTRY_BROAD %in% low_access_list ~ "low access",
TRUE~ "not low access"
)) %>%
filter(METRO_STATUS != "Not identified") %>%
ungroup() %>%
group_by(METRO_STATUS, low_access_industry) %>%
summarise(count = sum(WPFINWGT)) %>%
ungroup() %>% group_by(METRO_STATUS) %>%
mutate(share = count/sum(count)) %>%
filter(low_access_industry == "low accesss") %>%
select(-c(count, low_access_industry)) %>%
rename(`% in a low-access industry` = share)
low_access
low_access
low_access = sipp_2023 %>%
mutate(low_access_industry = case_when(
INDUSTRY_BROAD %in% low_access_list ~ "low access",
TRUE~ "not low access"
)) %>%
filter(METRO_STATUS != "Not identified") %>%
ungroup() %>%
group_by(METRO_STATUS, low_access_industry) %>%
summarise(count = sum(WPFINWGT)) %>%
ungroup() %>% group_by(METRO_STATUS) %>%
mutate(share = count/sum(count)) %>%
filter(low_access_industry == "low accesss") %>%
#  select(-c(count, low_access_industry)) %>%
rename(`% in a low-access industry` = share)
low_access = sipp_2023 %>%
mutate(low_access_industry = case_when(
INDUSTRY_BROAD %in% low_access_list ~ "low access",
TRUE~ "not low access"
)) %>%
filter(METRO_STATUS != "Not identified") %>%
ungroup() %>%
group_by(METRO_STATUS, low_access_industry) %>%
summarise(count = sum(WPFINWGT)) %>%
ungroup() %>% group_by(METRO_STATUS) %>%
mutate(share = count/sum(count)) %>%
filter(low_access_industry == "low access") %>%
#  select(-c(count, low_access_industry)) %>%
rename(`% in a low-access industry` = share)
low_access
low_access = sipp_2023 %>%
mutate(low_access_industry = case_when(
INDUSTRY_BROAD %in% low_access_list ~ "low access",
TRUE~ "not low access"
)) %>%
filter(METRO_STATUS != "Not identified") %>%
ungroup() %>%
group_by(METRO_STATUS, low_access_industry) %>%
summarise(count = sum(WPFINWGT)) %>%
ungroup() %>% group_by(METRO_STATUS) %>%
mutate(share = count/sum(count)) %>%
filter(low_access_industry == "low access") %>%
select(-c(count, low_access_industry)) %>%
rename(`% in a low-access industry` = share)
low_access
low_access = sipp_2023 %>%
mutate(low_access_industry = case_when(
INDUSTRY_BROAD %in% low_access_list ~ "low access",
TRUE~ "not low access"
)) %>%
filter(METRO_STATUS != "Not identified") %>%
ungroup() %>%
group_by(METRO_STATUS, low_access_industry) %>%
summarise(count = sum(WPFINWGT)) %>%
ungroup() %>% group_by(METRO_STATUS) %>%
mutate(share = 100*count/sum(count)) %>%
filter(low_access_industry == "low access") %>%
select(-c(count, low_access_industry)) %>%
rename(`% in a low-access industry` = share)
low_access
large_employer = sipp_2023 %>%
filter(METRO_STATUS != "Not identified") %>%
ungroup() %>%
group_by(METRO_STATUS, EMPLOYER_SIZE) %>%
summarise(count = sum(WPFINWGT)) %>%
ungroup() %>%
group_by(METRO_STATUS) %>%
mutate(share = 100*count/sum(count))
large_employer
large_employer = sipp_2023 %>%
filter(METRO_STATUS != "Not identified") %>%
ungroup() %>%
group_by(METRO_STATUS, EMPLOYER_SIZE) %>%
summarise(count = sum(WPFINWGT)) %>%
ungroup() %>%
group_by(METRO_STATUS) %>%
mutate(share = 100*count/sum(count)) %>%
filter(EMPLOYER_SIZE == "> 1,000")
large_employer
large_employer = sipp_2023 %>%
filter(METRO_STATUS != "Not identified") %>%
ungroup() %>%
group_by(METRO_STATUS, EMPLOYER_SIZE) %>%
summarise(count = sum(WPFINWGT)) %>%
ungroup() %>%
group_by(METRO_STATUS) %>%
mutate(share = 100*count/sum(count)) %>%
filter(EMPLOYER_SIZE == "> 1,000") %>%
rename(`% at a company with >1,000 employees` = share)
large_employer
large_employer = sipp_2023 %>%
filter(METRO_STATUS != "Not identified") %>%
ungroup() %>%
group_by(METRO_STATUS, EMPLOYER_SIZE) %>%
summarise(count = sum(WPFINWGT)) %>%
ungroup() %>%
group_by(METRO_STATUS) %>%
mutate(share = 100*count/sum(count)) %>%
filter(EMPLOYER_SIZE == "> 1,000") %>%
rename(`% at a company with >1,000 employees` = share) %>%
select(-c(EMPLOYER_SIZE, count))
large_employer
stats = median_income %>% left_join(edu)  %>% left_join(age) %>% left_join(low_access) %>% left_join(large_employer)
stats
setwd(output_path)
write.csv(stats, "summary_stats_urban_rural_discrepancies.csv")
setwd(output_path)
write.csv(stats, "summary_stats_urban_rural_discrepancies.csv")
median_income = sipp_2023 %>%
ungroup() %>%
filter(!is.na(METRO_STATUS)) %>% filter(METRO_STATUS != "Not identified") %>%
group_by(METRO_STATUS) %>%
summarise(`Median income` = Hmisc::wtd.quantile(TOTYEARINC, WPFINWGT, probs = 0.5))
# remove dependencies
rm(list = ls())
# load in packages
library(dplyr)
library(readxl)
library(openxlsx)
library(tidyr)
# set project directories
user_path = "/Users/sarah/Documents/GitHub"
project_path = file.path(user_path, "EIG-Fiscal-Impact-High-Skill-Federal")
methods_path = file.path(project_path, "Methodology")
output_path = file.path(project_path, "Output")
# read in full panel
load(file.path(output_path, "scenarios_taxes_expenditures_combined.RData"))
scenarios_panel = scenarios_panel %>%
mutate(taxes_individual = income_tax + total_payroll_taxes_employee + excise_taxes + customs_duties,
taxes_employer = total_payroll_taxes_employer,
taxes_total = taxes_individual + taxes_employer,
fiscal_impact = taxes_total - federal_expenditures
) %>%
select(Year, scenario,
income_type, income_h1b, income_spouse,
taxes_individual, taxes_employer, taxes_total,
federal_expenditures,
fiscal_impact)
scenarios_panel_2023 = scenarios_panel %>%
filter(Year==2023) %>% select(-c(Year))
# set scenario probabilities
probabilities = read_excel(
paste(methods_path,
"scenario probabilities.xlsx",
sep="/"),
sheet = "Scenario probabilities",
skip = 1
) %>% na.omit() %>%
mutate(scenario = as.numeric(...1)) %>%
select(scenario, contains("Probability"))
scenarios_panel = scenarios_panel %>%
left_join(probabilities, by = "scenario") %>%
mutate(probability  = case_when(
Year < 2023+6 ~ `Probability (years 1-6)`,
Year >= 2023 + 6 ~ `Probability (years 7-10)`
))
scenarios_panel_all_years_collapsed = scenarios_panel %>%
ungroup() %>% group_by(Year, income_type) %>%
summarise(fiscal_impact = sum(fiscal_impact*probability),
fed_expenditures = sum(federal_expenditures*probability),
taxes_individual = sum(taxes_individual*probability),
taxes_employer = sum(taxes_employer*probability),
taxes_total = sum(taxes_total*probability))
#############
# save output
write.xlsx(scenarios_panel_2023,
paste(output_path, "RESULTS_2023_all_scen.xlsx", sep="/"))
write.xlsx(scenarios_panel_all_years_collapsed,
paste(output_path, "RESULTS_all_years_probabilistic.xlsx", sep="/"))
annual_100k = 100000
annual_500k = 500000
retention_rate_green_card = 0.44
cumulative_estimate = scenarios_panel_all_years_collapsed %>%
ungroup() %>%
filter(income_type == "mean") %>%
mutate(
# gained
new_h1bs_100k = annual_100k,
new_h1bs_500k = annual_500k,
# lost
lost_h1bs_100k = case_when(
Year < 2029 ~ 0,
Year >=2029 ~ annual_100k - (annual_100k*retention_rate_green_card)
),
lost_h1bs_500k = case_when(
Year < 2029 ~ 0,
Year >=2029 ~ annual_500k - (annual_500k*retention_rate_green_card)
),
# cumulative
adjusted_h1bs_annnual_100k =  new_h1bs_100k - lost_h1bs_100k,
adjusted_h1bs_annnual_500k =  new_h1bs_500k - lost_h1bs_500k,
adjusted_h1bs_100k = cumsum(adjusted_h1bs_annnual_100k),
adjusted_h1bs_500k = cumsum(adjusted_h1bs_annnual_500k),
# adjust revenues, expenditures, total impact to be a cumulative estimate
total_revs_100k = taxes_total*adjusted_h1bs_100k,
total_expend_100k = fed_expenditures*adjusted_h1bs_100k,
total_impact_100k = fiscal_impact*adjusted_h1bs_100k,
total_revs_500k = taxes_total*adjusted_h1bs_500k,
total_expend_500k = fed_expenditures*adjusted_h1bs_500k,
total_impact_500k = fiscal_impact*adjusted_h1bs_500k)
non_collapsed_estimate =
cumulative_estimate %>%
select(Year,
total_revs_100k,
total_expend_100k,
total_impact_100k,
total_revs_500k,
total_expend_500k,
total_impact_500k)
collapsed_estimate =
cumulative_estimate %>%
summarise(`total revenues_100k` = sum(total_revs_100k),
`total expenditures_100k` = sum(total_expend_100k),
`total impact_100k`= sum(total_impact_100k),
`total impact_100k`= sum(total_impact_100k),
`total revenues_500k`= sum(total_revs_500k),
`total expenditures_500k`= sum(total_expend_500k),
`total impact_500k`= sum(total_impact_500k)) %>%
pivot_longer(cols = c(contains("total"))) %>%
mutate(`annual h1b inflow` = substr(name, nchar(name) - 3, nchar(name)),
variable = substr(name, 1, nchar(name) - 5)) %>% select(variable, `annual h1b inflow`, value) %>%
pivot_wider(names_from = variable,
values_from = value)
write.xlsx(collapsed_estimate, paste(output_path, "cumulative impact.xlsx", sep="/"))
write.xlsx(non_collapsed_estimate, paste(output_path, "annual impact raising cap.xlsx", sep="/"))
