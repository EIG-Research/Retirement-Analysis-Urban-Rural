knitr::opts_chunk$set(echo = TRUE)
# remove dependencies
rm(list = ls())
# load packages
library(dplyr)
library(survey)
library(survey)
library(batman)
library(batman)
library(ggplot2)
# set user path
project_directories <- list(
"sarah" = "/Users/sarah/Documents/GitHub/Retirement-Analysis-Urban-Rural"
)
# set user path
project_directories <- list(
"sarah" = "/Users/sarah/Documents/GitHub/Retirement-Analysis-Urban-Rural"
)
current_user <- Sys.info()[["user"]]
if (!current_user %in% names(project_directories)) {
stop("Root folder for current user is not defined.")
}
# set project paths
project_path = project_directories[[current_user]]
data_path = file.path(project_path, "Data")
output_path = file.path(project_path, "Output")
# Read in wrangled SIPP data (see 1. wrangle SIPP 2023.R)
load(paste(output_path, "SIPP_2023_WRANGLED.RData", sep = "/"))
# convert access, participation, and matching to bools
sipp_2023 = sipp_2023 %>%
mutate(ANY_RETIREMENT_ACCESS_bool = case_when(
ANY_RETIREMENT_ACCESS == "Yes" ~ 1,
ANY_RETIREMENT_ACCESS == "No" ~ 0
),
PARTICIPATING_bool = case_when(
PARTICIPATING == "Yes" ~ 1,
PARTICIPATING == "No" ~ 0
),
MATCHING_bool = case_when(
MATCHING == "Yes" ~ 1,
MATCHING == "No" ~ 0
))
metro_ind_access = sipp_2023 %>% count(METRO_STATUS, INDUSTRY_BROAD,
ANY_RETIREMENT_ACCESS)  %>%
filter(METRO_STATUS != "Not identified") %>% filter(!is.na(METRO_STATUS))
# how many are under 30?
count(metro_ind_access %>% filter(n<30))
# what do we exclude?
metro_ind_access_nu30 = metro_ind_access %>% filter(n<30)
unique(metro_ind_access_nu30$INDUSTRY_BROAD)
# what do we exclude?
metro_ind_access_nu30 = metro_ind_access %>% filter(n<30)
unique(metro_ind_access_nu30$INDUSTRY_BROAD)
excl = unique(metro_ind_access_nu30$INDUSTRY_BROAD)
# if we exclude unreliable industries, what does this leave us with?
metro_ind_access_n30 = metro_ind_access %>%
filter(!(INDUSTRY_BROAD %in% excl)) %>%
unique(metro_ind_access_n30$INDUSTRY_BROAD)
# if we exclude unreliable industries, what does this leave us with?
metro_ind_access_n30 = metro_ind_access %>%
filter(!(INDUSTRY_BROAD %in% excl))
unique(metro_ind_access_n30$INDUSTRY_BROAD)
incl =  unique(metro_ind_access_n30$INDUSTRY_BROAD)
unique(metro_ind_access_n30$INDUSTRY_BROAD)
# remove dependencies
rm(list = ls())
# load packages
library(dplyr)
library(tidyr)
library(readxl)
library(ranger)
library(ggplot2)
library(tibble)
library(scales)
library(openxlsx)
# set user path
project_directories <- list(
"sarah" = "/Users/sarah/Documents/GitHub/Retirement-Analysis-Urban-Rural",
"jiaxinhe" = "/Users/jiaxinhe/Documents/projects/Retirement-Analysis-Urban-Rural"
)
current_user <- Sys.info()[["user"]]
if (!current_user %in% names(project_directories)) {
stop("Root folder for current user is not defined.")
}
# set project paths
project_path = project_directories[[current_user]]
data_path = file.path(project_path, "Data")
sipp_path = file.path(data_path, "SIPP/2023")
output_path = file.path(project_path, "Output")
# set working directory for 2023 SIPP
setwd(output_path)
############################
# read in cleaned SIPP data
load("SIPP_2023_WRANGLED.RData")
# create subset with pretty names
sipp_2023_subset = sipp_2023 %>%
# renaming
rename(age = TAGE,
`account_value` = RETIREMENT_ACCT_VAL,
income = TPTOTINC) %>%
# booleans for outcome variables
mutate(access = case_when(
ANY_RETIREMENT_ACCESS == "Yes" ~ 1,
ANY_RETIREMENT_ACCESS == "No" ~ 0,
ANY_RETIREMENT_ACCESS == "Missing" ~ NA
),
matching = case_when(
MATCHING == "Yes" ~ 1,
MATCHING == "No" ~ 0,
MATCHING == "Missing" ~ NA
),
participates = case_when(
PARTICIPATING == "Yes" ~ 1,
PARTICIPATING == "No" ~ 0,
PARTICIPATING == "Missing" ~ NA
),
# categorical conversions (ordered and non-ordered)
# industry is not ordered, employer size is
education = case_when(
EDUCATION == "High School or less" ~ 1,
EDUCATION == "Some college" ~ 2,
EDUCATION == "Bachelor's degree or higher" ~ 3,
EDUCATION == "Missing" ~ NA
),
industry = factor(INDUSTRY_BROAD, ordered = FALSE),
employer_size = EJB1_EMPSIZE,
metro_status = factor(case_when(
METRO_STATUS == "Metropolitan area" ~ 1,
METRO_STATUS == "Non-metropolitan area" ~ 0,
TRUE ~ NA
), ordered = TRUE),
YEAR_INC_QT = as.numeric(cut(TOTYEARINC, quantile(TOTYEARINC, 0:10/10), label = 1:10))
) %>%
# select desired vars
select(WPFINWGT,
# outcome vars
access, matching, participates, account_value,
# regressors
age, education, income, industry, metro_status, employer_size, YEAR_INC_QT,
) %>%
na.omit()
# split train & test data; 80 / 20
train_index <- sample(1:nrow(sipp_2023_subset), 0.8 * nrow(sipp_2023_subset))
train_data <- sipp_2023_subset[train_index, ]
test_data <- sipp_2023_subset[-train_index, ]
bootstrap_classification <-  function(model_formula, model_data, model_weights, num_repeats = 100, num_trees = 500) {
results <- replicate(num_repeats, {
rf <- ranger(model_formula, data = model_data,
num.trees = num_trees,
case.weights = model_weights,
classification = TRUE,
write.forest = TRUE,
importance = 'permutation',
respect.unordered.factors = TRUE,
scale.permutation.importance = TRUE)
rf$variable.importance
}, simplify = "array")
# Compute mean and standard deviation across repeats
importance_summary <- apply(results, 1, function(x) c(importance = mean(x), sd = sd(x)))
importance_df <- data.frame(importance_summary)
importance_df =
rownames_to_column(importance_df, var = "stat") %>%
pivot_longer(cols = names(importance_df),
names_to = "variable") %>%
pivot_wider(names_from = "stat",
values_from = "value")
return(importance_df)
}
bootstrap_regression <-  function(model_formula, model_data, model_weights, num_repeats = 100, num_trees = 500) {
results <- replicate(num_repeats, {
rf <- ranger(model_formula, data = model_data,
num.trees = num_trees,
case.weights = model_weights,
classification = FALSE,
write.forest = TRUE,
importance = 'permutation',
respect.unordered.factors = TRUE,
scale.permutation.importance = TRUE)
rf$variable.importance
}, simplify = "array")
# Compute mean and standard deviation across repeats
importance_summary <- apply(results, 1, function(x) c(importance = mean(x), sd = sd(x)))
importance_df <- data.frame(importance_summary)
importance_df =
rownames_to_column(importance_df, var = "stat") %>%
pivot_longer(cols = names(importance_df),
names_to = "variable") %>%
pivot_wider(names_from = "stat",
values_from = "value")
return(importance_df)
}
set.seed(42)  # For reproducibility
access_results <- bootstrap_classification(
model_formula =  access ~ age + industry + income + education + metro_status + employer_size,
model_data = train_data,
model_weights = train_data$WPFINWGT)
matching_results <- bootstrap_classification(
model_formula =  matching ~ age + industry + income + education + metro_status + employer_size,
model_data = train_data,
model_weights = train_data$WPFINWGT)
participation_results = bootstrap_classification(
model_formula =  participates ~ age + industry + income + education + metro_status + employer_size,
model_data = train_data,
model_weights = train_data$WPFINWGT)
account_value_results = bootstrap_regression(
model_formula =  account_value ~ age + industry + income + education + metro_status + employer_size,
model_data = train_data,
model_weights = train_data$WPFINWGT)
# display for visual checking
account_value_results
