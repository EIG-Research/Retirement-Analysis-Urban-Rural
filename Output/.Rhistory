sipp_2023_subset %>% select(employer_size) %>% max())))) %>%
unnest_longer(employer_size),
rep_agent %>% mutate(income = replace(income, 1, list(c(median(sipp_2023_subset %>% filter(YEAR_INC_QT == min(YEAR_INC_QT)) %>% .$income),
median(sipp_2023_subset %>% filter(YEAR_INC_QT == max(YEAR_INC_QT)) %>% .$income))))) %>%
unnest_longer(income),
rep_agent %>% mutate(industry = replace(industry, 1, list(minmax.industries))) %>%
unnest_longer(industry)
) %>% mutate(metro_status = replace(metro_status, which(metro_status == 1),
list(c(1, 0)))) %>% unnest_longer(metro_status)
# run random forest model 100 times to generate average prediction
bootstrap_prediction <- function(model_formula, model_data, model_weights,
predict_data, num_repeats = 100, num_trees = 500){
results <- data.frame(matrix(ncol = nrow(predict_data), nrow = 0))
for(i in 1:num_repeats){
rf <- ranger(model_formula, data = model_data,
num.trees = num_trees,
case.weights = model_weights,
classification = FALSE,
write.forest = TRUE,
importance = 'permutation',
respect.unordered.factors = TRUE,
scale.permutation.importance = TRUE)
results <- rbind(results, predict(rf, data = predict_data)$predictions)
}
results %>% summarise_all(., mean)
}
set.seed(42) # for reproducibility
# generate probability array and convert to matrix
prob.array <- bootstrap_prediction(model_formula = access ~ age + industry + income + education + metro_status + employer_size,
model_data = sipp_2023_subset,
model_weights = sipp_2023_subset$WPFINWGT,
predict_data = permute_agents)
treatment_labels <- c("age 24",
"age 60",
"high school or less",
"bachelors or above",
"<= 10 workers",
">= 1000 workers",
"lowest income decile",
"highest income decile",
"worst access industry",
"best access industry")
prob.matrix <- (as.data.frame(split(as.numeric(prob.array[1,]), 1:2)) %>%
rename(urban = X1, rural = X2) - prob.array[1,1]) %>%
mutate(urban = percent(urban + (urban == 0)*prob.array[1,1], accuracy = 0.01),
rural = percent(rural, accuracy = 0.01)) %>%
mutate(labels = c("representative agent", treatment_labels)) %>% relocate(labels)
# Alternative representation with more permutations
# Function generating each row in the permutations
create_permutation <- function(base){
bind_rows(
base %>% mutate(metro_status = replace(metro_status, 1,
list(c(1, 0)))) %>% unnest_longer(metro_status),
base %>% mutate(age = replace(age, 1, list(c((18+30)/2, (55+65)/2)))) %>% unnest_longer(age),
base %>% mutate(education = replace(education, 1, list(c(sipp_2023_subset %>% select(education) %>% min(),
sipp_2023_subset %>% select(education) %>% max())))) %>%
unnest_longer(education),
base %>% mutate(employer_size = replace(employer_size, 1, list(c(sipp_2023_subset %>% select(employer_size) %>% min(),
sipp_2023_subset %>% select(employer_size) %>% max())))) %>%
unnest_longer(employer_size),
base %>% mutate(income = replace(income, 1, list(c(median(sipp_2023_subset %>% filter(YEAR_INC_QT == min(YEAR_INC_QT)) %>% .$income),
median(sipp_2023_subset %>% filter(YEAR_INC_QT == max(YEAR_INC_QT)) %>% .$income))))) %>%
unnest_longer(income),
base %>% mutate(industry = replace(industry, 1, list(minmax.industries))) %>%
unnest_longer(industry)
)
}
# Corresponding to first row in the output matrix, each row is used to generate a column
first_row <- create_permutation(rep_agent)
permute_agents_matrix <- first_row
for(i in 2:nrow(first_row)){
permute_agents_matrix <- rbind(permute_agents_matrix, create_permutation(first_row[i,]))
}
set.seed(42) # for reproducibility
# convert probability array to matrix
prob.array.matform <- bootstrap_prediction(model_formula = access ~ age + industry + income + education + metro_status + employer_size,
model_data = sipp_2023_subset,
model_weights = sipp_2023_subset$WPFINWGT,
predict_data = permute_agents_matrix)
set.seed(42) # for reproducibility
# convert probability array to matrix
prob.array.matform <- bootstrap_prediction(model_formula = access ~ age + industry + income + education + metro_status + employer_size,
model_data = sipp_2023_subset,
model_weights = sipp_2023_subset$WPFINWGT,
predict_data = permute_agents_matrix)
prob.matform <- matrix(prob.array.matform - prob.array.matform[[1]],
nrow = nrow(first_row), ncol = nrow(first_row))
prob.matform[upper.tri(prob.matform, diag = TRUE)] <- 0
excl_h <- seq(from = 4, to = nrow(first_row), by = 2)
prob.matform[cbind(excl_h, excl_h - 1)] <- 0
prob.matform[1,1] <- prob.matform[1,1] + prob.array.matform[1]
prob.matform <- as.data.frame(prob.matform[,c(-11,-12)])
prob.matform <- prob.matform %>% rename_with(~c("urban", "rural", treatment_labels[1:(length(treament_labels)-2)])) %>%
mutate(labels = c("urban", "rural", treatment_labels)) %>%relocate(labels)
treatment_labels <- c("age 24",
"age 60",
"high school or less",
"bachelors or above",
"<= 10 workers",
">= 1000 workers",
"lowest income decile",
"highest income decile",
"worst access industry",
"best access industry")
# Alternative representation with more permutations
# Function generating each row in the permutations
create_permutation <- function(base){
bind_rows(
base %>% mutate(metro_status = replace(metro_status, 1,
list(c(1, 0)))) %>% unnest_longer(metro_status),
base %>% mutate(age = replace(age, 1, list(c((18+30)/2, (55+65)/2)))) %>% unnest_longer(age),
base %>% mutate(education = replace(education, 1, list(c(sipp_2023_subset %>% select(education) %>% min(),
sipp_2023_subset %>% select(education) %>% max())))) %>%
unnest_longer(education),
base %>% mutate(employer_size = replace(employer_size, 1, list(c(sipp_2023_subset %>% select(employer_size) %>% min(),
sipp_2023_subset %>% select(employer_size) %>% max())))) %>%
unnest_longer(employer_size),
base %>% mutate(income = replace(income, 1, list(c(median(sipp_2023_subset %>% filter(YEAR_INC_QT == min(YEAR_INC_QT)) %>% .$income),
median(sipp_2023_subset %>% filter(YEAR_INC_QT == max(YEAR_INC_QT)) %>% .$income))))) %>%
unnest_longer(income),
base %>% mutate(industry = replace(industry, 1, list(minmax.industries))) %>%
unnest_longer(industry)
)
}
# Corresponding to first row in the output matrix, each row is used to generate a column
first_row <- create_permutation(rep_agent)
permute_agents_matrix <- first_row
for(i in 2:nrow(first_row)){
permute_agents_matrix <- rbind(permute_agents_matrix, create_permutation(first_row[i,]))
}
set.seed(42) # for reproducibility
# convert probability array to matrix
prob.array.matform <- bootstrap_prediction(model_formula = access ~ age + industry + income + education + metro_status + employer_size,
model_data = sipp_2023_subset,
model_weights = sipp_2023_subset$WPFINWGT,
predict_data = permute_agents_matrix)
prob.matform <- matrix(prob.array.matform - prob.array.matform[[1]],
nrow = nrow(first_row), ncol = nrow(first_row))
prob.matform[upper.tri(prob.matform, diag = TRUE)] <- 0
excl_h <- seq(from = 4, to = nrow(first_row), by = 2)
prob.matform[cbind(excl_h, excl_h - 1)] <- 0
prob.matform[1,1] <- prob.matform[1,1] + prob.array.matform[1]
prob.matform <- as.data.frame(prob.matform[,c(-11,-12)])
prob.matform <- prob.matform %>% rename_with(~c("urban", "rural", treatment_labels[1:(length(treament_labels)-2)])) %>%
mutate(labels = c("urban", "rural", treatment_labels)) %>%relocate(labels)
prob.matform <- prob.matform %>% rename_with(~c("urban", "rural", treatment_labels[1:(length(treatment_labels)-2)])) %>%
mutate(labels = c("urban", "rural", treatment_labels)) %>%relocate(labels)
prob.matform
setwd(output_path)
write.csv(prob.matform, "rf_prediction_matrix_alternative.csv")
prob.matform
write.csv(prob.matform, "rf_prediction_matrix_alternative.csv")
str(prob.matform)
prob.matform <- prob.matform %>% rename_with(~c("urban", "rural", treatment_labels[1:(length(treatment_labels)-2)])) %>%
mutate(labels = as.character(c("urban", "rural", treatment_labels))) %>%relocate(labels)
c("urban", "rural", treatment_labels[1:(length(treatment_labels)-2)]
c("urban", "rural", treatment_labels[1:(length(treatment_labels)-2)])
c("urban", "rural", treatment_labels[1:(length(treatment_labels)-2)])
prob.matform <- matrix(prob.array.matform - prob.array.matform[[1]],
nrow = nrow(first_row), ncol = nrow(first_row))
prob.matform[upper.tri(prob.matform, diag = TRUE)] <- 0
excl_h <- seq(from = 4, to = nrow(first_row), by = 2)
prob.matform[cbind(excl_h, excl_h - 1)] <- 0
prob.matform[1,1] <- prob.matform[1,1] + prob.array.matform[1]
prob.matform <- as.data.frame(prob.matform[,c(-11,-12)])
prob.matform <- prob.matform %>% rename_with(~c("urban", "rural", treatment_labels[1:(length(treatment_labels)-2)])) %>%
mutate(labels = as.character(c("urban", "rural", treatment_labels))) %>%relocate(labels)
prob.matform
setwd(output_path)
write.csv(prob.matform, "rf_prediction_matrix_alternative.csv")
str(prob.matform)
prob.matform <- matrix(prob.array.matform - prob.array.matform[[1]],
nrow = nrow(first_row), ncol = nrow(first_row))
prob.matform[upper.tri(prob.matform, diag = TRUE)] <- 0
excl_h <- seq(from = 4, to = nrow(first_row), by = 2)
prob.matform[cbind(excl_h, excl_h - 1)] <- 0
prob.matform[1,1] <- prob.matform[1,1] + prob.array.matform[1]
prob.matform <- as.data.frame(prob.matform[,c(-11,-12)])
prob.matform <- prob.matform %>% rename_with(~c("urban", "rural", treatment_labels[1:(length(treatment_labels)-2)])) %>%
mutate(labels = c("urban", "rural", treatment_labels)) %>% relocate(labels) %>%
mutate(labels = as.character(labels))
write.csv(prob.matform, "rf_prediction_matrix_alternative.csv")
prob.matform <- apply(prob.matform$labels, 2, as.character)
prob.matform <- lapply(prob.matform$labels, 2, as.character)
prob.matform <- lapply(prob.matform$labels, as.character)
prob.matform
prob.matform <- matrix(prob.array.matform - prob.array.matform[[1]],
nrow = nrow(first_row), ncol = nrow(first_row))
prob.matform[upper.tri(prob.matform, diag = TRUE)] <- 0
excl_h <- seq(from = 4, to = nrow(first_row), by = 2)
prob.matform[cbind(excl_h, excl_h - 1)] <- 0
prob.matform[1,1] <- prob.matform[1,1] + prob.array.matform[1]
prob.matform <- as.data.frame(prob.matform[,c(-11,-12)])
prob.matform <- prob.matform %>% rename_with(~c("urban", "rural", treatment_labels[1:(length(treatment_labels)-2)])) %>%
mutate(labels = c("urban", "rural", treatment_labels)) %>% relocate(labels)
prob.matform$labels <- unlist(lapply(prob.matform$labels, as.character))
write.csv(prob.matform, "rf_prediction_matrix_alternative.csv")
prob.matform <- matrix(prob.array.matform - prob.array.matform[[1]],
nrow = nrow(first_row), ncol = nrow(first_row))
prob.matform[upper.tri(prob.matform, diag = TRUE)] <- 0
excl_h <- seq(from = 4, to = nrow(first_row), by = 2)
prob.matform[cbind(excl_h, excl_h - 1)] <- 0
prob.matform[1,1] <- prob.matform[1,1] + prob.array.matform[1]
prob.matform <- as.data.frame(prob.matform[,c(-11,-12)])
prob.matform <- prob.matform %>% rename_with(~c("urban", "rural", treatment_labels[1:(length(treatment_labels)-2)])) %>%
mutate(labels = c("urban", "rural", treatment_labels)) %>% relocate(labels) %>%
as.character
setwd(output_path)
write.csv(prob.matform, "rf_prediction_matrix_alternative.csv")
prob.matform <- matrix(prob.array.matform - prob.array.matform[[1]],
nrow = nrow(first_row), ncol = nrow(first_row))
prob.matform[upper.tri(prob.matform, diag = TRUE)] <- 0
excl_h <- seq(from = 4, to = nrow(first_row), by = 2)
prob.matform[cbind(excl_h, excl_h - 1)] <- 0
prob.matform[1,1] <- prob.matform[1,1] + prob.array.matform[1]
prob.matform <- as.data.frame(prob.matform[,c(-11,-12)])
prob.matform <- prob.matform %>% rename_with(~c("urban", "rural", treatment_labels[1:(length(treatment_labels)-2)])) %>%
mutate(labels = c("urban", "rural", treatment_labels)) %>% relocate(labels) %>%
ungroup %>% unlist
prob.matform
prob.matform <- matrix(prob.array.matform - prob.array.matform[[1]],
nrow = nrow(first_row), ncol = nrow(first_row))
prob.matform[upper.tri(prob.matform, diag = TRUE)] <- 0
excl_h <- seq(from = 4, to = nrow(first_row), by = 2)
prob.matform[cbind(excl_h, excl_h - 1)] <- 0
prob.matform[1,1] <- prob.matform[1,1] + prob.array.matform[1]
prob.matform <- as.data.frame(prob.matform[,c(-11,-12)])
prob.matform <- prob.matform %>% rename_with(~c("urban", "rural", treatment_labels[1:(length(treatment_labels)-2)])) %>%
mutate(labels = c("urban", "rural", treatment_labels)) %>% relocate(labels) %>%
ungroup
write.csv(prob.matform, "rf_prediction_matrix_alternative.csv")
prob.matform <- matrix(prob.array.matform - prob.array.matform[[1]],
nrow = nrow(first_row), ncol = nrow(first_row))
prob.matform[upper.tri(prob.matform, diag = TRUE)] <- 0
excl_h <- seq(from = 4, to = nrow(first_row), by = 2)
prob.matform[cbind(excl_h, excl_h - 1)] <- 0
prob.matform[1,1] <- prob.matform[1,1] + prob.array.matform[1]
prob.matform <- as.data.frame(prob.matform[,c(-11,-12)])
prob.matform <- prob.matform %>% mutate(labels = c("urban", "rural", treatment_labels)) %>%
relocate(labels)
write.csv(prob.matform, "rf_prediction_matrix_alternative.csv")
c("urban", "rural", treatment_labels)
prob.matform <- matrix(prob.array.matform - prob.array.matform[[1]],
nrow = nrow(first_row), ncol = nrow(first_row))
prob.matform[upper.tri(prob.matform, diag = TRUE)] <- 0
excl_h <- seq(from = 4, to = nrow(first_row), by = 2)
prob.matform[cbind(excl_h, excl_h - 1)] <- 0
prob.matform[1,1] <- prob.matform[1,1] + prob.array.matform[1]
prob.matform <- as.data.frame(prob.matform[,c(-11,-12)])
prob.matform <- prob.matform %>% mutate(labels = c("urban", "rural", "age 24",
"age 60",
"high school or less",
"bachelors or above",
"<= 10 workers",
">= 1000 workers",
"lowest income decile",
"highest income decile",
"worst access industry",
"best access industry")) %>%
relocate(labels)
prob.matform <- matrix(prob.array.matform - prob.array.matform[[1]],
nrow = nrow(first_row), ncol = nrow(first_row))
prob.matform[upper.tri(prob.matform, diag = TRUE)] <- 0
excl_h <- seq(from = 4, to = nrow(first_row), by = 2)
prob.matform[cbind(excl_h, excl_h - 1)] <- 0
prob.matform[1,1] <- prob.matform[1,1] + prob.array.matform[1]
prob.matform <- as.data.frame(prob.matform[,c(-11,-12)])
prob.matform <- prob.matform %>%
rename_with(., c("urban",
"rural",
"age 24",
"age 60",
"high school or less",
"bachelors or above",
"<= 10 workers",
">= 1000 workers",
"lowest income decile",
"highest income decile")) %>%
mutate(labels = c("urban",
"rural",
"age 24",
"age 60",
"high school or less",
"bachelors or above",
"<= 10 workers",
">= 1000 workers",
"lowest income decile",
"highest income decile",
"worst access industry",
"best access industry")) %>%
relocate(labels)
prob.matform <- matrix(prob.array.matform - prob.array.matform[[1]],
nrow = nrow(first_row), ncol = nrow(first_row))
prob.matform[upper.tri(prob.matform, diag = TRUE)] <- 0
excl_h <- seq(from = 4, to = nrow(first_row), by = 2)
prob.matform[cbind(excl_h, excl_h - 1)] <- 0
prob.matform[1,1] <- prob.matform[1,1] + prob.array.matform[1]
prob.matform <- as.data.frame(prob.matform[,c(-11,-12)])
prob.matform <- prob.matform %>%
rename_with(~c("urban",
"rural",
"age 24",
"age 60",
"high school or less",
"bachelors or above",
"<= 10 workers",
">= 1000 workers",
"lowest income decile",
"highest income decile")) %>%
mutate(labels = c("urban",
"rural",
"age 24",
"age 60",
"high school or less",
"bachelors or above",
"<= 10 workers",
">= 1000 workers",
"lowest income decile",
"highest income decile",
"worst access industry",
"best access industry")) %>%
relocate(labels)
View(prob.matform)
write.csv(prob.matform, "rf_prediction_matrix_alternative.csv")
prob.array.matform <- bootstrap_prediction(model_formula = access ~ age + industry + income + education + metro_status + employer_size,
model_data = sipp_2023_subset,
model_weights = sipp_2023_subset$WPFINWGT,
predict_data = permute_agents_matrix)
prob.matform <- matrix(prob.array.matform - prob.array.matform[[1]],
nrow = nrow(first_row), ncol = nrow(first_row))
prob.matform[upper.tri(prob.matform, diag = TRUE)] <- 0
excl_h <- seq(from = 4, to = nrow(first_row), by = 2)
prob.matform[cbind(excl_h, excl_h - 1)] <- 0
prob.matform[1,1] <- prob.matform[1,1] + prob.array.matform[1]
prob.matform <- as.data.frame(prob.matform[,c(-11,-12)])
prob.matform <- prob.matform %>% rename_with(~c("urban", "rural", treatment_labels[1:(length(treatment_labels)-2)])) %>%
mutate(labels = c("urban", "rural", treatment_labels)) %>% relocate(labels) %>%
View(prob.matform)
prob.matform <- matrix(prob.array.matform - prob.array.matform[[1]],
nrow = nrow(first_row), ncol = nrow(first_row))
prob.matform[upper.tri(prob.matform, diag = TRUE)] <- 0
excl_h <- seq(from = 4, to = nrow(first_row), by = 2)
prob.matform[cbind(excl_h, excl_h - 1)] <- 0
prob.matform[1,1] <- prob.matform[1,1] + prob.array.matform[1]
prob.matform <- as.data.frame(prob.matform[,c(-11,-12)])
prob.matform <- prob.matform %>% rename_with(~c("urban", "rural", treatment_labels[1:(length(treatment_labels)-2)])) %>%
mutate(labels = c("urban", "rural", treatment_labels)) %>% relocate(labels) %>%
View(prob.matform)
View(prob.array.matform)
prob.matform
treatment_labels <- c("age 24",
"age 60",
"high school or less",
"bachelors or above",
"<= 10 workers",
">= 1000 workers",
"lowest income decile",
"highest income decile",
"worst access industry",
"best access industry")
prob.matform <- matrix(prob.array.matform - prob.array.matform[[1]],
nrow = nrow(first_row), ncol = nrow(first_row))
prob.matform[upper.tri(prob.matform, diag = TRUE)] <- 0
excl_h <- seq(from = 4, to = nrow(first_row), by = 2)
prob.matform[cbind(excl_h, excl_h - 1)] <- 0
prob.matform[1,1] <- prob.matform[1,1] + prob.array.matform[1]
prob.matform <- as.data.frame(prob.matform[,c(-11,-12)])
prob.matform <- prob.matform %>% rename_with(~c("urban", "rural", treatment_labels[1:(length(treatment_labels)-2)])) %>%
mutate(labels = c("urban", "rural", treatment_labels)) %>% relocate(labels) %>%
prob.matform <- matrix(prob.array.matform - prob.array.matform[[1]],
nrow = nrow(first_row), ncol = nrow(first_row))
prob.matform <- matrix(prob.array.matform - prob.array.matform[[1]],
nrow = nrow(first_row), ncol = nrow(first_row))
prob.matform[upper.tri(prob.matform, diag = TRUE)] <- 0
excl_h <- seq(from = 4, to = nrow(first_row), by = 2)
prob.matform[cbind(excl_h, excl_h - 1)] <- 0
prob.matform[1,1] <- prob.matform[1,1] + prob.array.matform[1]
prob.matform <- as.data.frame(prob.matform[,c(-11,-12)])
prob.matform <- prob.matform %>% rename_with(~c("urban", "rural", treatment_labels[1:(length(treatment_labels)-2)])) %>%
mutate(labels = c("urban", "rural", treatment_labels)) %>% relocate(labels)
View(prob.matform)
write.csv(prob.matform, "rf_prediction_matrix_alternative.csv")
prob.matform
typeof(prob.matform$urban)
prob.matform <- matrix(prob.array.matform - prob.array.matform[[1]],
nrow = nrow(first_row), ncol = nrow(first_row))
prob.matform[upper.tri(prob.matform, diag = TRUE)] <- 0
excl_h <- seq(from = 4, to = nrow(first_row), by = 2)
prob.matform[cbind(excl_h, excl_h - 1)] <- 0
prob.matform[1,1] <- prob.matform[1,1] + prob.array.matform[1]
prob.matform <- as.data.frame(prob.matform[,c(-11,-12)])
prob.matform <- prob.matform %>% rename_with(~c("urban", "rural", treatment_labels[1:(length(treatment_labels)-2)])) %>%
mutate(labels = c("urban", "rural", treatment_labels)) %>% relocate(labels) %>%
mutate_all(~unlist(.))
prob.matform
write.csv(prob.matform, "rf_prediction_matrix_alternative.csv")
prob.matform <- matrix(prob.array.matform - prob.array.matform[[1]],
nrow = nrow(first_row), ncol = nrow(first_row))
prob.matform[upper.tri(prob.matform, diag = TRUE)] <- 0
excl_h <- seq(from = 4, to = nrow(first_row), by = 2)
prob.matform[cbind(excl_h, excl_h - 1)] <- 0
prob.matform[1,1] <- prob.matform[1,1] + prob.array.matform[1]
prob.matform <- as.data.frame(prob.matform[,c(-11,-12)])
prob.matform <- prob.matform %>% rename_with(~c("urban", "rural", treatment_labels[1:(length(treatment_labels)-2)])) %>%
mutate(labels = c("urban", "rural", treatment_labels)) %>% relocate(labels) %>%
mutate_all(~unlist(.)) %>% mutate_all(~percent(., accuracy = 0.01))
View(prob.matform)
prob.matform <- matrix(prob.array.matform - prob.array.matform[[1]],
nrow = nrow(first_row), ncol = nrow(first_row))
prob.matform[upper.tri(prob.matform, diag = TRUE)] <- 0
excl_h <- seq(from = 4, to = nrow(first_row), by = 2)
prob.matform[cbind(excl_h, excl_h - 1)] <- 0
prob.matform[1,1] <- prob.matform[1,1] + prob.array.matform[1]
prob.matform <- as.data.frame(prob.matform[,c(-11,-12)])
prob.matform <- prob.matform %>% mutate_all(~percent(., accuracy = 0.01)) %>%
rename_with(~c("urban", "rural", treatment_labels[1:(length(treatment_labels)-2)])) %>%
mutate(labels = c("urban", "rural", treatment_labels)) %>% relocate(labels) %>%
mutate_all(~unlist(.))
prob.matform
prob.matform <- matrix(prob.array.matform - prob.array.matform[[1]],
nrow = nrow(first_row), ncol = nrow(first_row))
prob.matform[upper.tri(prob.matform, diag = TRUE)] <- 0
excl_h <- seq(from = 4, to = nrow(first_row), by = 2)
prob.matform[cbind(excl_h, excl_h - 1)] <- 0
prob.matform[1,1] <- prob.matform[1,1] + prob.array.matform[1]
prob.matform <- as.data.frame(prob.matform[,c(-11,-12)])
prob.matform <- prob.matform %>% mutate_all(~percent(., accuracy = 0.01)) %>%
rename_with(~c("urban", "rural", treatment_labels[1:(length(treatment_labels)-2)])) %>%
mutate(labels = c("urban", "rural", treatment_labels)) %>% relocate(labels)
prob.matform <- matrix(prob.array.matform - prob.array.matform[[1]],
nrow = nrow(first_row), ncol = nrow(first_row))
prob.matform[upper.tri(prob.matform, diag = TRUE)] <- 0
excl_h <- seq(from = 4, to = nrow(first_row), by = 2)
prob.matform[cbind(excl_h, excl_h - 1)] <- 0
prob.matform[1,1] <- prob.matform[1,1] + prob.array.matform[1]
prob.matform <- as.data.frame(prob.matform[,c(-11,-12)])
prob.matform <- prob.matform %>% mutate_all(~percent(., accuracy = 0.01))
###########################################################
# generate prediction matrix for different characteristics
# find the representative agent within the data set
rep_agent <- sipp_2023_subset %>% select(age, education, income, employer_size) %>%
summarise_all(., median) %>%
mutate(industry = sipp_2023_subset %>% count(industry) %>% filter(n == max(n)) %>% .$industry %>% as.character(),
metro_status = 1) %>%
mutate(age = as.numeric(age), income = as.numeric(income))
rep_agent
# the representative respondent to SIPP is 42-year-old (median age), has some college education (median education),
# earns the median income of the data set, works for a company with 51 to 100 employees in the Educational Services,
# and Health Care and Social Assistance industry, and resides in a metro area. Think of a middle-class, middle-aged
# healthcare professional holding a nursing or technician degree and working for a small urban hospital.
# extract the industries with the best and worst access
access_ranked_industries <- read.csv(file.path(output_path, "retirement_by_industry.csv"))
minmax.industries <- c(access_ranked_industries %>% filter(SHARE_RETIREMENT_ACCESS == min(SHARE_RETIREMENT_ACCESS)) %>% .$INDUSTRY_BROAD,
access_ranked_industries %>% filter(SHARE_RETIREMENT_ACCESS == max(SHARE_RETIREMENT_ACCESS)) %>% .$INDUSTRY_BROAD)
# permute by minimum and maximum values of age, education, employer size, income, and industry by retirement
# access; then duplicate the predictions for rural
permute_agents <- bind_rows(
rep_agent %>% mutate(age = replace(age, 1, list(c(rep_agent$age, (18+30)/2, (55+65)/2)))) %>% unnest_longer(age),
rep_agent %>% mutate(education = replace(education, 1, list(c(sipp_2023_subset %>% select(education) %>% min(),
sipp_2023_subset %>% select(education) %>% max())))) %>%
unnest_longer(education),
rep_agent %>% mutate(employer_size = replace(employer_size, 1, list(c(sipp_2023_subset %>% select(employer_size) %>% min(),
sipp_2023_subset %>% select(employer_size) %>% max())))) %>%
unnest_longer(employer_size),
rep_agent %>% mutate(income = replace(income, 1, list(c(median(sipp_2023_subset %>% filter(YEAR_INC_QT == min(YEAR_INC_QT)) %>% .$income),
median(sipp_2023_subset %>% filter(YEAR_INC_QT == max(YEAR_INC_QT)) %>% .$income))))) %>%
unnest_longer(income),
rep_agent %>% mutate(industry = replace(industry, 1, list(minmax.industries))) %>%
unnest_longer(industry)
) %>% mutate(metro_status = replace(metro_status, which(metro_status == 1),
list(c(1, 0)))) %>% unnest_longer(metro_status)
# run random forest model 100 times to generate average prediction
bootstrap_prediction <- function(model_formula, model_data, model_weights,
predict_data, num_repeats = 100, num_trees = 500){
results <- data.frame(matrix(ncol = nrow(predict_data), nrow = 0))
for(i in 1:num_repeats){
rf <- ranger(model_formula, data = model_data,
num.trees = num_trees,
case.weights = model_weights,
classification = FALSE,
write.forest = TRUE,
importance = 'permutation',
respect.unordered.factors = TRUE,
scale.permutation.importance = TRUE)
results <- rbind(results, predict(rf, data = predict_data)$predictions)
}
results %>% summarise_all(., mean)
}
set.seed(42) # for reproducibility
# generate probability array and convert to matrix
prob.array <- bootstrap_prediction(model_formula = access ~ age + industry + income + education + metro_status + employer_size,
model_data = sipp_2023_subset,
model_weights = sipp_2023_subset$WPFINWGT,
predict_data = permute_agents)
treatment_labels <- c("age 24",
"age 60",
"high school or less",
"bachelors or above",
"<= 10 workers",
">= 1000 workers",
"lowest income decile",
"highest income decile",
"worst access industry",
"best access industry")
prob.matrix <- (as.data.frame(split(as.numeric(prob.array[1,]), 1:2)) %>%
rename(urban = X1, rural = X2) - prob.array[1,1]) %>%
mutate(urban = percent(urban + (urban == 0)*prob.array[1,1], accuracy = 0.01),
rural = percent(rural, accuracy = 0.01)) %>%
mutate(labels = c("representative agent", treatment_labels)) %>% relocate(labels) %>%
mutate_all(~unlist(.))
prob.matrix
write.csv(prob.matrix, "rf_prediction_matrix.csv")
