survey = "acs5",
variables = "B01003_001",  # Total population
year = 2023
) %>%
mutate(state = state.abb[match(NAME, state.name)])
fig5 = left_join(fig5, state_pop, by = c("state_abrev" = "state"))
write.csv(fig5, paste(output_path, "figures", "fig5.csv",sep="/"))
# covariance
cor(fig5$perc_change_apps, fig5$perc_change_births)
# exclude outliers
fig5 = fig5 %>%
filter(state != "Delaware" & state != "Wyoming")
cor(fig5$perc_change_apps, fig5$perc_change_births)
rm(list = ls())
# load packages
library(dplyr)
library(tidyr)
library(ggplot2)
library(openxlsx)
library(readxl)
library(ggplot2)
library(readr)
user_path = "/Users/sarah/Documents/GitHub"
# read in data - national and state level. constructed in wrangle_bfs.R
load(file.path(output_path, "bfs_nation.RData"))
load(file.path(output_path, "bfs_states.RData"))
rm(list = ls())
# load packages
library(dplyr)
library(tidyr)
library(ggplot2)
library(openxlsx)
library(readxl)
library(ggplot2)
library(readr)
user_path = "/Users/sarah/Documents/GitHub"
project_path = file.path(user_path, "/dynamism2024")
data_path = file.path(project_path, "data")
output_path = file.path(project_path, "output")
# read in data - national and state level. constructed in wrangle_bfs.R
load(file.path(output_path, "bfs_nation.RData"))
load(file.path(output_path, "bfs_states.RData"))
print("total business applications in 2024")
bfs_nation %>% filter(date == "Nov-2024") %>%
select(`Total Applications`)
print("total high-propensity business applications in 2024")
bfs_nation %>% filter(date == "Nov-2024") %>%
select(`Total High Propensity Applications`)
print("% change in business application filing since 2023, excluding December 2023")
bfs_nation %>%
filter(year == 2023 | year==2024) %>% filter(month!="Dec") %>%
select(year, `Total Applications`) %>%
ungroup() %>% group_by(year) %>%
summarise(`Total Applications` = sum(as.numeric(`Total Applications`))) %>%
pivot_wider(names_from = year, values_from = `Total Applications`) %>%
mutate(`change year over year` = 100*(`2024` - `2023`)/`2023`)
bfs_nation %>%
filter(year == 2023 | year==2024) %>% filter(month!="Dec") %>%
select(year, `Total Applications`) %>%
ungroup() %>% group_by(year) %>%
summarise(`Total Applications` = sum(as.numeric(`Total Applications`))) %>%
pivot_wider(names_from = year, values_from = `Total Applications`) %>%
mutate(`change year over year` = 100*(`2024` - `2023`)/`2023`)
print("Monthly average high-propensity applications in 2024")
bfs_nation %>% filter(year ==2024) %>% ungroup() %>%
mutate(`Total High Propensity Applications` = as.numeric(`Total High Propensity Applications`)) %>%
summarise(`Monthly mean high propensity` =
mean(`Total High Propensity Applications`,na.rm=TRUE))
print("Business applications in January 2024")
bfs_nation %>% filter(year == 2024 & month == "Jan") %>%
select(`Total Applications`)
print("Business applications in March 2024")
bfs_nation %>% filter(year ==2024 & month == "Mar") %>%
select(`Total Applications`)
bfs_nation %>% filter(year == 2024 ) %>%
filter(`Total High Propensity Applications` == min(`Total High Propensity Applications`)) %>%
select(month, `Total High Propensity Applications`)
change_2019_2024_indsturies = bfs_nation %>%
filter(year==2024 | year==2019) %>%
filter(month !="Dec") %>%
select(-c("Total High Propensity Applications", "Total Applications")) %>%
select(-c(date, month)) %>%
ungroup() %>%
group_by(year) %>%
mutate(across(vals,
~as.numeric(.))) %>%
summarise(across(vals, sum)) %>%
pivot_longer(cols = vals) %>%
mutate(value = as.numeric(value)) %>%
pivot_wider(names_from = year, values_from = value) %>%
mutate(`higher in 2024 than 2019` = case_when(
`2024` > `2019` ~ "True",
`2024` <= `2019` ~ "False"
),
`2024 - 2019` = 100*(`2024` - `2019`)/`2019`)
vals = names(bfs_nation)[2:23]
vals = vals[-c(9,19)]
change_2019_2024_indsturies = bfs_nation %>%
filter(year==2024 | year==2019) %>%
filter(month !="Dec") %>%
select(-c("Total High Propensity Applications", "Total Applications")) %>%
select(-c(date, month)) %>%
ungroup() %>%
group_by(year) %>%
mutate(across(vals,
~as.numeric(.))) %>%
summarise(across(vals, sum)) %>%
pivot_longer(cols = vals) %>%
mutate(value = as.numeric(value)) %>%
pivot_wider(names_from = year, values_from = value) %>%
mutate(`higher in 2024 than 2019` = case_when(
`2024` > `2019` ~ "True",
`2024` <= `2019` ~ "False"
),
`2024 - 2019` = 100*(`2024` - `2019`)/`2019`)
change_2019_2024_indsturies %>%
ungroup() %>% group_by(`higher in 2024 than 2019`) %>%
count()
print("How far far has manufacturing fallen relative to 2019?")
change_2019_2024_indsturies
bfs_nation %>% filter(year==2024 & month=="Nov") %>%
select("Retail Trade: U.S. Total")
paste("Number of states that saw a decline in high propensity applications 2023-2024")
decline_df_2023_2024 = bfs_states %>%
filter(year == 2023 | year==2024) %>%
filter(month !="Dec") %>% #remove December of 2019 for comparison
select(-c(date, month)) %>%
# pivot using state names
pivot_longer(cols = names(bfs_states)[2:52],
names_to = "state", values_to = "applications") %>%
ungroup() %>%
group_by(year, state) %>%
# total applications by state
summarise(applications = sum(as.numeric(applications))) %>%
pivot_wider(names_from = year, values_from = applications) %>%
mutate(change_2023_2024 = 100*(`2024` - `2023`)/ `2023`)
decline = count(decline_df_2023_2024 %>% filter(change_2023_2024<0))
decline
paste("Top 3 states in terms of high propensity applications:")
bfs_states %>%
filter(year==2024) %>% filter(month!="Dec") %>%
select(-c(date, month)) %>%
# pivot using state names
pivot_longer(cols = names(bfs_states)[2:52],
names_to = "state", values_to = "applications") %>%
ungroup() %>%
group_by(year, state) %>%
# total applications
summarise(applications = sum(as.numeric(applications))) %>%
arrange(desc(applications))
paste("Texas overtook New York for #3 spot in # of high propensity application filings in 2024 relative to 2019")
decline_df_2019_2024 =
bfs_states %>%
filter(year == 2019 | year==2024) %>%
filter(month !="Dec") %>% #remove December of 2019 for comparison
select(-c(date, month)) %>%
pivot_longer(cols = names(bfs_states)[2:52],
names_to = "state", values_to = "applications") %>%
ungroup() %>%
group_by(year, state) %>%
summarise(applications = sum(as.numeric(applications))) %>%
pivot_wider(names_from = year, values_from = applications) %>%
mutate(change_2019_2024 = 100*(`2024` - `2019`)/ `2019`)
# sort to show ranking
decline_df_2019_2024 %>%
arrange(desc(`2019`))
decline_df_2019_2024 %>%
arrange(desc(`2024`))
paste("Texas high propensity applications in 2019 (excl. December)")
bfs_states %>%
filter(year==2019 & month!="Dec") %>%
summarise(Texas = sum(as.numeric(Texas)))
paste("Texas high  propensity applications in 2024")
bfs_states %>%
filter(year==2024 & month!="Dec") %>%
summarise(Texas = sum(as.numeric(Texas)))
paste("West Virginia increase in high propensity business applications 2019-2024")
bfs_states %>%
filter(month !="Dec") %>% filter(year==2019 | year==2024) %>%
group_by(year) %>%
summarise(`West Virginia` = sum(as.numeric(`West Virginia`))) %>%
mutate(change = 100*(`West Virginia` - lag(`West Virginia`))/lag(`West Virginia`))
paste("Number of states that more than doubled high propensity applications:")
decline_df_2019_2024 %>%
filter(`2024` > 2*`2019`)
paste("Number of states that had > 50% increase in applications")
count(decline_df_2019_2024 %>%
filter(change_2019_2024 >50))
# cleaning
rm(decline, decline_df_2019_2024, decline_df_2023_2024)
load(file.path(output_path, "bdm_nation.RData"))
load(file.path(output_path, "bdm_states.RData"))
rm(list = ls())
library(dplyr)
library(tidyr)
library(readxl)
# set project paths
user_path = "/Users/sarah/My Drive/DATA CHECKS"
project_path = file.path(user_path, "Rural Analysis")
data_path = file.path(project_path, "data")
output_path = file.path(project_path, "output")
# read in historical county president data for missing years
# 2000, 2004, 2008.
election = read_excel(paste(data_path,
"election",
"countypres_2000-2020.xlsx",
sep="/")) %>%
filter(office == "US PRESIDENT") %>%
filter(year < 2012) %>%
select(year, county_fips, party, candidatevotes) %>%
mutate(candidatevotes = as.numeric(candidatevotes)) %>%
distinct() %>%
pivot_wider(names_from = party,
values_from = candidatevotes,
id_cols = c(year, county_fips)) %>%
mutate(Winner = case_when(
DEMOCRAT > REPUBLICAN ~ "Democrat",
REPUBLICAN > DEMOCRAT ~ "Republican",
TRUE ~ NA
)) %>%
mutate(label = paste(year, "Winner Party")) %>%
select(-c(DEMOCRAT, REPUBLICAN, GREEN, OTHER, year)) %>%
pivot_wider(names_from = label,
values_from = Winner) %>% na.omit()
master_df = read_excel("/Users/sarah/My Drive/DATA CHECKS/Rural Analysis/data/election/Election Master Dataset 2024_prelimV10.xlsx") %>%
mutate(`2012 Winner Party` = ifelse(`2012 Winner`=="Romney", "Republican", "Democrat"),
`2016 Winner Party` = ifelse(`2016 Winner`=="Trump", "Republican", "Democrat"),
`2020 Winner Party` = ifelse(`2020 Winner`=="Trump", "Republican", "Democrat"),
`2024 Winner Party` = ifelse(`2024 Winner`=="Trump", "Republican", "Democrat")) %>%
select(`County ID`, County, contains("Winner Party")) %>%
full_join(election, by = c("County ID" = "county_fips"))
demog = read_excel(paste(project_path,
"Rural Analysis Dec24 DATA CHECK.xlsx",
sep="/"),
sheet = "Election") %>%
select(`County ID`, contains("Non-Hispanic White % of Population",
contains("Hispanic")))
demog = read_excel(paste(project_path,
"Rural Analysis Dec24 DATA CHECK.xlsx",
sep="/"),
sheet = "Election") %>%
select(`County ID`, contains("Non-Hispanic White % of Population"),
contains("Hispanic")))
demog = read_excel(paste(project_path,
"Rural Analysis Dec24 DATA CHECK.xlsx",
sep="/"),
sheet = "Election") %>%
select(`County ID`, contains("Non-Hispanic White % of Population"),
contains("Hispanic"))
View(demog)
# project paths
rm(list = ls())
library(dplyr)
library(readxl)
project_path = "/Users/sarah/Documents/GitHub/State-Local-Fiscal-Impact-of-H1Bs"
output_path = file.path(project_path, "data/cleaned")
data_path = file.path(project_path, "data/raw/H1b Employer Hub")
data_path_base = file.path(project_path, "data/raw")
h1b_by_state =
# read in annual files (H1B hub cannot handle file size w/ all years combined)
# 2009 - 2024
lapply(
dir(data_path, pattern = "^Employer Information.*[.]xlsx$",full.names = TRUE),
openxlsx::read.xlsx
) %>% bind_rows() %>%
filter(Petitioner.State != "FM" &
Petitioner.State != "AE" &
Petitioner.State != "AP" &
Petitioner.State != "MH" &
Petitioner.State != "XX" &
!is.na(Petitioner.State)) %>%
group_by(Fiscal.Year, Petitioner.State) %>%
summarise(Initial.Approval = sum(Initial.Approval),
Initial.Denial = sum(Initial.Denial),
Continuing.Approval = sum(Continuing.Approval),
Continuing.Denial = sum(Continuing.Denial)) %>%
mutate(Fiscal.Year = as.numeric(Fiscal.Year))
rm(list = ls())
library(dplyr)
library(tidyr)
library(readxl)
project_path = "/Users/sarah/Documents/GitHub/State-Local-Fiscal-Impact-of-H1Bs"
output_path = file.path(project_path, "data/cleaned/figures")
data_path = file.path(project_path, "data/raw")
# inflation adjustments
df_cpi = readxl::read_excel(paste(data_path, "BLS Data",
"CUUS0000SA0.xls", sep = "/"),
skip=10) %>%
mutate(year = substr(observation_date, 1, 4),
month = substr(observation_date, 6,7))
cpi_2024 = df_cpi[df_cpi$year=="2024" & df_cpi$month =="01",]$CUUS0000SA0
cpi_2019 = df_cpi[df_cpi$year=="2019" & df_cpi$month =="01",]$CUUS0000SA0
cpi_adj = cpi_2024/cpi_2019
revenue_category_line_codes = c(
10, 9,  18,  3,  49,  25,  39,  19,  34,  31, 32, 41,  21,  20,
24, # non-higher education charges; need to be line 24 - line 25
43, 27, 42,  37,  35,  29,  28,  36,  33,  40,  48,  30)
modeled_revs = c( 10, 9, 18)
excluded_revs = c(3, 49, 25, 39, 19, 34, 31, 32, 41)
average_per_HH_earner_revs = c(21, 20)
average_per_child_revs = c(24)
average_per_HH_adults_revs = c( 43, 27, 42, 37, 35, 29, 28, 36, 33, 40, 48, 30)
state_revenues = read_excel(
paste(data_path, "State and Local Government Finances",
"2019_finances.xlsx", sep="/"),
sheet = "2019_US_WY",
skip = 10
) %>%
# select only national data
select(...1, Description, `United States Total`)  %>%
# select only relevant expenditure categories
filter(...1 %in% revenue_category_line_codes) %>%
mutate(`United States Total` = as.numeric(`United States Total`))
View(state_revenues)
state_revenues = read_excel(
paste(data_path, "State and Local Government Finances",
"2019_finances.xlsx", sep="/"),
sheet = "2019_US_WY",
skip = 10
) %>%
# select only national data
select(...1, Description, `United States Total`)  %>%
# select only relevant expenditure categories
filter(...1 %in% revenue_category_line_codes) %>%
mutate(`United States Total` = 1000*as.numeric(`United States Total`)) # in thousands
# adjust education to exclude higher education, for the non-higher edu revenues.
higher_edu = state_revenues[state_revenues$...1 == 25,]$`United States Total`
higher_edu
state_revenues = state_revenues %>%
mutate(Revenues =
ifelse(...1 == 24, `United States Total`- higher_edu,
`United States Total`)) %>%
# inflation adjustment
mutate(Revenues = Revenues*cpi_adj) %>%
# re-name columns for pretty display.
mutate(pretty_names = case_when(
...1 ==  10 ~ "Sales Tax",
...1 ==  9 ~ "Property Tax",
...1 ==  18 ~ "Individual Income Tax",
...1 ==  3 ~ "Intergovernmental Revenue",
...1 ==  49 ~ "Insurance Trust Revenue",
...1 ==  25 ~ "Higher Education Charges",
...1 ==  39 ~ "Interest Earnings",
...1 ==  19 ~ "Corporate Income Tax",
...1 ==  34 ~ "Housing and Community Development Charges",
...1 ==  31 ~ "Sea and Inlad Port Facility Charges",
...1 ==  32 ~ "Natural Resource Charges",
...1 ==  41 ~ "Sale of Property",
...1 ==  21 ~ "Other Taxes",
...1 ==  20 ~ "Motor Vehicle License Tax",
...1 ==  24 ~ "Education Charges (excl. Higher education)", # non-higher education charges; need to be line 24 - line 25
...1 ==  43 ~ "Utility Revenue",
...1 ==  27 ~ "Hospital Charges",
...1 ==  42 ~ "Other General Revenue",
...1 ==  37 ~ "Other Charges",
...1 ==  35 ~ "Sewerage Charges",
...1 ==  29 ~ "Air Transportation Charges",
...1 ==  28 ~ "Highway Charges",
...1 ==  36 ~ "Solid Waste Management Charges",
...1 ==  33 ~ "Parks and Recreation Charges",
...1 ==  40 ~ "Special Assessments",
...1 ==  48 ~ "Liquor Store Revenue",
...1 ==  30 ~ "Parking Facility Charges"
))  %>%
# categorization by model handling
mutate(categorization = case_when(
...1 %in% modeled_revs~ "modeled",
...1 %in% excluded_revs~ "excluded",
...1 %in% average_per_HH_earner_revs~ "average (per each household income earner)",
...1 %in% average_per_child_revs~ "average (per child)",
...1 %in% average_per_HH_adults_revs~ "average (per household adults)",
)) %>%
# clean-up
select(-c(`United States Total`, ...1))
# save for export.
write.xlsx(state_revenues, paste(output_path,
"revenues_by_source_of_funds.xlsx", sep="/"))
library(readxl)
library(openxlsx)
# save for export.
write.xlsx(state_revenues, paste(output_path,
"revenues_by_source_of_funds.xlsx", sep="/"))
expenditure_category_line_codes = c(
77, 120, 71, 112, 110, 94, 107, 84, 85, 73, 75, 81,
44, 35, 34, 93, 106, 88, 104, 96, 76, 119, 117, 89,
86, 92, 83, 118, 116, 99, 111, 109, 97, 108, 90)
excluded_expend = c(77, 120, 71, 112, 110, 94, 107, 84, 85)
modeled_expend = c( 73, 75)
marginal_expend = c( 81, 44, 35, 34, 93, 106, 88, 104, 96, 76, 119, 117, 89)
average_expend = c(86, 92, 83, 118, 116, 99, 111)
fixed_expend = c(109, 97, 108, 90)
expenditure_category_line_codes = c(
77, 120, 71, 112, 110, 94, 107, 84, 85, 73, 75, 81,
44, 35, 34, 93, 106, 88, 104, 96, 76, 119, 117, 89,
86, 92, 83, 118, 116, 99, 111, 109, 97, 108, 90)
excluded_expend = c(77, 120, 71, 112, 110, 94, 107, 84, 85)
modeled_expend = c( 73, 75)
marginal_expend = c( 81, 44, 35, 34, 93, 106, 88, 104, 96, 76, 119, 117, 89)
average_expend = c(86, 92, 83, 118, 116, 99, 111)
fixed_expend = c(109, 97, 108, 90)
state_expenditures = read_excel(
paste(data_path, "State and Local Government Finances",
"2019_finances.xlsx", sep="/"),
sheet = "2019_US_WY",
skip = 10
) %>%
# select only national data
select(...1, Description, `United States Total`)  %>%
# select only relevant expenditure categories
filter(...1 %in% expenditure_category_line_codes) %>%
mutate(Expenditures = 1000*as.numeric(`United States Total`) * cpi_adj, # in thousands.
# create pretty names
pretty_names = case_when(
...1 == 77 ~ "Public Welfare",
...1 ==120 ~ "Insurance Trust Expenditure",
...1 == 71 ~ "Higher Education",
...1 ==112 ~ "Other and Unalocable",
...1 ==110 ~ "Interest on General Debt",
...1 ==94 ~ "Corrections",
...1 ==107 ~ "Judicial and Legal",
...1 ==84 ~ "Employment Security Administration",
...1 ==85 ~ "Vetrans' service",
...1 ==73 ~ "Elementary and Secondary Education",
...1 ==75 ~ "Other Education",
...1 ==81 ~ "Hospitals",
...1 ==44 ~ "Water Supply",
...1 ==35 ~ "Sewerage",
...1 ==34 ~ "Housing and Community Development",
...1 ==93 ~ "Fire Protection",
...1 ==106 ~ "Financial Administration",
...1 ==88 ~ "Air Transportation (Airports)",
...1 ==104 ~ "Solid Waste Management",
...1 ==96 ~ "Protective Inspection and Regulation",
...1 ==76 ~ "Libraries",
...1 ==119 ~ "Liquor Store Expenditure",
...1 ==117 ~ "Gas Supply",
...1 ==89 ~ "Parking Facilities",
...1 ==86 ~ "Highways",
...1 ==92 ~ "Police Protection",
...1 ==83 ~ "Health",
...1 ==118 ~ "Transit",
...1 ==116 ~ "Electric Power",
...1 ==99 ~ "Parks and Recreation",
...1 ==111 ~ "Miscellaneous Commercial Activities",
...1 ==109 ~ "Other Governmental Administration",
...1 ==97 ~ "Natural Resources",
...1 ==108 ~ "General Public Buildings",
...1 ==90 ~ "Sea and Inland Port Facilities"),
# add color categorizations
categorization = case_when(
...1 %in% excluded_expend ~ "excluded",
...1 %in% modeled_expend~ "modeled (child scenarios only, otherwise excluded",
...1 %in% marginal_expend~ "marginal",
...1 %in% average_expend~ "average",
...1 %in% fixed_expend~ "fixed"
)) %>%
select(-c(...1, `United States Total`))
# save for export.
write.xlsx(state_expenditures, paste(output_path,
"expenditures_by_source_of_funds.xlsx", sep="/"))
# remove dependencies
rm(list = ls())
# load packages
library(dplyr)
library(haven)
# remove dependencies
rm(list = ls())
# load packages
library(dplyr)
library(haven)
# set user path
project_directories <- list(
"sarah" = "/Users/sarah/Documents/GitHub"
)
# Setting project path based on current user
current_user <- Sys.info()[["user"]]
if (!current_user %in% names(project_directories)) {
stop("Root folder for current user is not defined.")
}
# set user path
project_directories <- list(
"sarah" = "/Users/sarah/Documents/GitHub/Retirement-Analysis-Urban-Rural"
)
# Setting project path based on current user
current_user <- Sys.info()[["user"]]
if (!current_user %in% names(project_directories)) {
stop("Root folder for current user is not defined.")
}
# remove dependencies
rm(list = ls())
# load packages
library(dplyr)
library(haven)
# set user path
project_directories <- list(
"sarah" = "/Users/sarah/Documents/GitHub/Retirement-Analysis-Urban-Rural"
)
current_user <- Sys.info()[["user"]]
if (!current_user %in% names(project_directories)) {
stop("Root folder for current user is not defined.")
}
# set project paths
project_path = project_directories[[current_user]]
data_path = file.path(project_path, "Data")
sipp_path = file.path(data_path, "SIPP/2023")
output_path = file.path(project_path, "Output")
# set working directory for 2023 SIPP
setwd(sipp_path)
sip_2023_load = read.dta(pu2023.dta)
library(haven)
sip_2023_load = read_dta("pu2023.dta")
sipp_2023_load = read_dta("pu2023.dta")
