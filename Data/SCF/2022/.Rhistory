NON_GOVT_WORKER = case_when(
INDUSTRY < 9370 ~ "non-government",
TRUE ~ "government or out of universe"
),
IN_AGE_RANGE = case_when(
AGE >=18 & AGE <=65 ~ "yes",
TRUE ~ "no"
),
PARTICIPATES = case_when(
# (see https://www.federalreserve.gov/econres/files/bulletin.macro.txt)
# DCPLANCJ
x11032 > 0 ~ "Yes",
x11132 > 0 ~ "Yes",
x11032 == -1 ~ "Yes",
x11132 == -1 ~ "Yes",
x5316 == 1 & x6461 == 1 ~ "Yes",
x5324 == 1 & x6466 == 1 ~ "Yes",
TRUE ~ "No"),
ANY_RETIREMENT_ACCESS = case_when(
PARTICIPATES == "Yes" ~ "Yes",
x4136 == 1 ~ "Yes", # does the employer offer retirement plans
TRUE ~ "No"
),
MATCHING = case_when(
x11047 == 1 ~ "Yes",
x11147 == 1 ~ "Yes",
TRUE ~ "No"),
RETIREMENT_ACCT_VAL = # for reference person only; excl. family account vals.
x6551 + x6552 + x6553 + # IRA accounts
x6554 + # Keogh account
x11032 # 401(k).403(B)/SRA/Thrift or Savings
)
scf_2022 = scf_2022 %>%
filter(IN_AGE_RANGE == "yes") %>%
filter(NON_GOVT_WORKER == "non-government") %>%
filter(FULL_PART_TIME == "full time") %>%
filter(WAGE_SALARY > 0) %>%
select(AGE, WAGE_SALARY, INDUSTRY, WGT,
PARTICIPATES,
ANY_RETIREMENT_ACCESS,
MATCHING,
RETIREMENT_ACCT_VAL)
# save output.
setwd(output_path)
save(scf_2022, file = "SCF_2022_WRANGLED.RData")
# Read in wrangled SCF data (see 1. wrangle SCF 2022.R)
load(paste(output_path, "SCF_2022_WRANGLED.RData", sep = "/"))
unique(scf_2022$MATCHING)
na.omit(scf_2022)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
# remove dependencies
rm(list = ls())
# load packages
library(dplyr)
library(survey)
library(batman)
library(ggplot2)
# set user path
project_directories <- list(
"sarah" = "/Users/sarah/Documents/GitHub/Retirement-Analysis-Urban-Rural",
"jiaxinhe" = "/Users/jiaxinhe/Documents/projects/Retirement-Analysis-Urban-Rural"
)
current_user <- Sys.info()[["user"]]
if (!current_user %in% names(project_directories)) {
stop("Root folder for current user is not defined.")
}
# set project paths
project_path = project_directories[[current_user]]
data_path = file.path(project_path, "Data")
output_path = file.path(project_path, "Output")
# Read in wrangled SIPP data (see 1. wrangle SIPP 2023.R)
load(paste(output_path, "SIPP_2023_WRANGLED.RData", sep = "/"))
# convert access, participation, and matching to bools
sipp_2023 = sipp_2023 %>%
mutate(ANY_RETIREMENT_ACCESS_bool = case_when(
ANY_RETIREMENT_ACCESS == "Yes" ~ 1,
ANY_RETIREMENT_ACCESS == "No" ~ 0
),
PARTICIPATING_bool = case_when(
PARTICIPATING == "Yes" ~ 1,
PARTICIPATING == "No" ~ 0
),
MATCHING_bool = case_when(
MATCHING == "Yes" ~ 1,
MATCHING == "No" ~ 0
))
metro_ind_access = sipp_2023 %>% count(METRO_STATUS, INDUSTRY_BROAD,
ANY_RETIREMENT_ACCESS)  %>%
filter(METRO_STATUS != "Not identified") %>% filter(!is.na(METRO_STATUS))
# hist(metro_ind_access$n, main = "metro X industry X access", xlab = "n")
# how many are under 30?
count(metro_ind_access %>% filter(n<30))
# what do we exclude?
metro_ind_access_nu30 = metro_ind_access %>% filter(n<30)
unique(metro_ind_access_nu30$INDUSTRY_BROAD)
excl = unique(metro_ind_access_nu30$INDUSTRY_BROAD)
# if we exclude unreliable industries, what does this leave us with?
metro_ind_access_n30 = metro_ind_access %>%
filter(!(INDUSTRY_BROAD %in% excl))
unique(metro_ind_access_n30$INDUSTRY_BROAD)
incl =  unique(metro_ind_access_n30$INDUSTRY_BROAD)
ind_access = sipp_2023 %>% filter(METRO_STATUS != "Not identified") %>%
filter(!is.na(METRO_STATUS)) %>%
count(INDUSTRY_BROAD, ANY_RETIREMENT_ACCESS)
# how many are under 30?
count(ind_access %>% filter(n<30))
# what do we exclude?
ind_access_nu30 = ind_access %>% filter(n<30)
unique(ind_access_nu30$INDUSTRY_BROAD)
excl = unique(ind_access_nu30$INDUSTRY_BROAD)
# if we exclude unreliable industries, what does this leave us with?
ind_access_n30 = ind_access %>%
filter(!(INDUSTRY_BROAD %in% excl))
unique(ind_access_n30$INDUSTRY_BROAD)
incl =  unique(ind_access_n30$INDUSTRY_BROAD)
# if we exclude these industries, is variance too large?
sipp_2023_excl_ind = sipp_2023 %>%
filter(INDUSTRY_BROAD %in% incl) %>%
filter(METRO_STATUS != "Not identified")
design <- svydesign(ids = ~0, weights = ~WPFINWGT, data = sipp_2023_excl_ind)
# mean, se of retirement access generally.
svymean(~ANY_RETIREMENT_ACCESS_bool, design)
# means for sub groups
res = svyby(~ANY_RETIREMENT_ACCESS_bool, by = ~ INDUSTRY_BROAD, design, svymean)
# plot
ggplot(res, aes(x = INDUSTRY_BROAD, y = ANY_RETIREMENT_ACCESS_bool)) +
geom_bar(stat = "identity", position = position_dodge(), color = "black") +
geom_errorbar(aes(ymin = ANY_RETIREMENT_ACCESS_bool - se, ymax = ANY_RETIREMENT_ACCESS_bool + se),
width = 0.2, position = position_dodge(0.9)) +
labs(title = "Retirement Access with Standard Errors",
x = "Industry",
y = "Retirement Access",
axis.ticks.x  = element_blank()) +
theme_minimal()
# this looks ok, and fits w/ intuition
# design effects --- does clustering or stratification increase variance?
# on the subsection of >30 n.
# DEFF ~ 1 similar to random sample
# > 1 higher variance w/ clustering
# >2 high clustering, less precise
# < 1 stratification improves precision
# consider: re-run svydesign construction to exclude Information
svymean(~ANY_RETIREMENT_ACCESS_bool, design, deff = TRUE)
# all subgroups
res2 = svyby(~ANY_RETIREMENT_ACCESS_bool, by = ~INDUSTRY_BROAD, design, svymean, deff = TRUE)
# Exclude DEFF > 2, which is Information
excl <- c(excl, res2 %>% filter(res2$DEff.ANY_RETIREMENT_ACCESS_bool > 2) %>%
.$INDUSTRY_BROAD)
incl <- setdiff(incl, excl)
# plot DEFF results
ggplot(res2, aes(x = INDUSTRY_BROAD, y = DEff.ANY_RETIREMENT_ACCESS_bool)) +
geom_bar(stat = "identity", position = position_dodge(), color = "black") +
labs(title = "Design Effect (DEFF) by Industry",
x = "Industry",
y = "Design Effect (DEFF)") +
theme_minimal()
res2 = res2 %>%
mutate(
lower_CI = ANY_RETIREMENT_ACCESS_bool - 1.96 * se,
upper_CI = ANY_RETIREMENT_ACCESS_bool + 1.96 * se
)
ggplot(res2, aes(x = INDUSTRY_BROAD, y = ANY_RETIREMENT_ACCESS_bool)) +
geom_bar(stat = "identity", position = position_dodge(), color = "black") +
geom_errorbar(aes(ymin = lower_CI, ymax = upper_CI),
width = 0.2, position = position_dodge(0.9)) +
labs(title = "Retirement access with 95% Confidence Intervals",
x = "Industry",
y = "Retirement access") +
theme_minimal()
# looks fine, no abnormal values
confint(svymean(~ANY_RETIREMENT_ACCESS_bool, design))
# final list that passed robustness checks
print(incl)
#output the final list
save(incl, file = file.path(output_path, "industry_robust.RData"))
# generate a crosswalk of state abbrs, state fips
state_fips_lookup <- data.frame(
state_fips = c(1, 2, 4, 5, 6, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19,
20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33,
34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48,
49, 50, 51, 53, 54, 55, 56),
state_abbr = c("AL", "AK", "AZ", "AR", "CA", "CO", "CT", "DE", "DC", "FL", "GA",
"HI", "ID", "IL", "IN", "IA", "KS", "KY", "LA", "ME", "MD", "MA",
"MI", "MN", "MS", "MO", "MT", "NE", "NV", "NH", "NJ", "NM", "NY",
"NC", "ND", "OH", "OK", "OR", "PA", "RI", "SC", "SD", "TN", "TX",
"UT", "VT", "VA", "WA", "WV", "WI", "WY")
)
sipp_2023 = sipp_2023 %>% left_join(state_fips_lookup, by = c("TST_INTV" = "state_fips"))
# basic state count.
sipp_2023 %>%
count(state_abbr, METRO_STATUS) %>%
filter(!is.na(METRO_STATUS)) %>% filter(METRO_STATUS != "Not identified") %>%
ggplot(aes(x = state_abbr, y = n, fill = as.factor(METRO_STATUS))) +
geom_bar(stat = "identity", position = "dodge", color = "black") + theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
labs(title = "States X metro pairs unweighted count",
x = "State", y = "n")
# how many are n<30 ?
sipp_2023 %>%
count(state_abbr, METRO_STATUS) %>%
filter(!is.na(METRO_STATUS)) %>% filter(METRO_STATUS != "Not identified") %>%
filter(n<30) %>%
ggplot(aes(x = state_abbr, y = n, fill = as.factor(METRO_STATUS))) +
geom_bar(stat = "identity", position = "dodge", color = "black") + theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
labs(title = "States X metro pairs with n < 30",
x = "State", y = "n")
# how many states does this impact?
st_met_n_under30 = sipp_2023 %>%
count(state_abbr, METRO_STATUS) %>%
filter(!is.na(METRO_STATUS)) %>%
filter(METRO_STATUS != "Not identified") %>%
filter(n<30)
length(unique(st_met_n_under30$state_abbr))
# > 50% of the sample has states with either a metro or a non-metro sample of n < 30.
# this is not a viable sub group.
# Read in wrangled SCF data (see 1. wrangle SCF 2022.R)
load(paste(output_path, "SCF_2022_WRANGLED.RData", sep = "/"))
na.omit(scf_2022)
View(scf_2022)
scf_2022_load = read_dta("p22i6.dta")
# remove dependencies
rm(list = ls())
# load packages
library(dplyr)
library(haven)
# set user path
project_directories <- list(
"sarah" = "/Users/sarah/Documents/GitHub/Retirement-Analysis-Urban-Rural",
"jiaxinhe" = "/Users/jiaxinhe/Documents/projects/Retirement-Analysis-Urban-Rural"
)
current_user <- Sys.info()[["user"]]
if (!current_user %in% names(project_directories)) {
stop("Root folder for current user is not defined.")
}
# set project paths
project_path = project_directories[[current_user]]
data_path = file.path(project_path, "Data")
scf_path = file.path(data_path, "SCF/2022")
output_path = file.path(project_path, "Output")
# set working directory for 2022 SCF
setwd(scf_path)
scf_2022_load = read_dta("p22i6.dta")
View(scf_2022_load)
knitr::opts_chunk$set(echo = TRUE)
# remove dependencies
rm(list = ls())
# load packages
library(dplyr)
library(survey)
library(batman)
library(ggplot2)
# set user path
project_directories <- list(
"sarah" = "/Users/sarah/Documents/GitHub/Retirement-Analysis-Urban-Rural",
"jiaxinhe" = "/Users/jiaxinhe/Documents/projects/Retirement-Analysis-Urban-Rural"
)
current_user <- Sys.info()[["user"]]
if (!current_user %in% names(project_directories)) {
stop("Root folder for current user is not defined.")
}
# set project paths
project_path = project_directories[[current_user]]
data_path = file.path(project_path, "Data")
output_path = file.path(project_path, "Output")
# Read in wrangled SIPP data (see 1. wrangle SIPP 2023.R)
load(paste(output_path, "SIPP_2023_WRANGLED.RData", sep = "/"))
# convert access, participation, and matching to bools
sipp_2023 = sipp_2023 %>%
mutate(ANY_RETIREMENT_ACCESS_bool = case_when(
ANY_RETIREMENT_ACCESS == "Yes" ~ 1,
ANY_RETIREMENT_ACCESS == "No" ~ 0
),
PARTICIPATING_bool = case_when(
PARTICIPATING == "Yes" ~ 1,
PARTICIPATING == "No" ~ 0
),
MATCHING_bool = case_when(
MATCHING == "Yes" ~ 1,
MATCHING == "No" ~ 0
))
metro_ind_access = sipp_2023 %>% count(METRO_STATUS, INDUSTRY_BROAD,
ANY_RETIREMENT_ACCESS)  %>%
filter(METRO_STATUS != "Not identified") %>% filter(!is.na(METRO_STATUS))
# hist(metro_ind_access$n, main = "metro X industry X access", xlab = "n")
# how many are under 30?
count(metro_ind_access %>% filter(n<30))
# what do we exclude?
metro_ind_access_nu30 = metro_ind_access %>% filter(n<30)
unique(metro_ind_access_nu30$INDUSTRY_BROAD)
excl = unique(metro_ind_access_nu30$INDUSTRY_BROAD)
# if we exclude unreliable industries, what does this leave us with?
metro_ind_access_n30 = metro_ind_access %>%
filter(!(INDUSTRY_BROAD %in% excl))
unique(metro_ind_access_n30$INDUSTRY_BROAD)
incl =  unique(metro_ind_access_n30$INDUSTRY_BROAD)
ind_access = sipp_2023 %>% filter(METRO_STATUS != "Not identified") %>%
filter(!is.na(METRO_STATUS)) %>%
count(INDUSTRY_BROAD, ANY_RETIREMENT_ACCESS)
# how many are under 30?
count(ind_access %>% filter(n<30))
# what do we exclude?
ind_access_nu30 = ind_access %>% filter(n<30)
unique(ind_access_nu30$INDUSTRY_BROAD)
excl = unique(ind_access_nu30$INDUSTRY_BROAD)
# if we exclude unreliable industries, what does this leave us with?
ind_access_n30 = ind_access %>%
filter(!(INDUSTRY_BROAD %in% excl))
unique(ind_access_n30$INDUSTRY_BROAD)
incl =  unique(ind_access_n30$INDUSTRY_BROAD)
# if we exclude these industries, is variance too large?
sipp_2023_excl_ind = sipp_2023 %>%
filter(INDUSTRY_BROAD %in% incl) %>%
filter(METRO_STATUS != "Not identified")
design <- svydesign(ids = ~0, weights = ~WPFINWGT, data = sipp_2023_excl_ind)
# mean, se of retirement access generally.
svymean(~ANY_RETIREMENT_ACCESS_bool, design)
# means for sub groups
res = svyby(~ANY_RETIREMENT_ACCESS_bool, by = ~ INDUSTRY_BROAD, design, svymean)
# plot
ggplot(res, aes(x = INDUSTRY_BROAD, y = ANY_RETIREMENT_ACCESS_bool)) +
geom_bar(stat = "identity", position = position_dodge(), color = "black") +
geom_errorbar(aes(ymin = ANY_RETIREMENT_ACCESS_bool - se, ymax = ANY_RETIREMENT_ACCESS_bool + se),
width = 0.2, position = position_dodge(0.9)) +
labs(title = "Retirement Access with Standard Errors",
x = "Industry",
y = "Retirement Access",
axis.ticks.x  = element_blank()) +
theme_minimal()
# this looks ok, and fits w/ intuition
# design effects --- does clustering or stratification increase variance?
# on the subsection of >30 n.
# DEFF ~ 1 similar to random sample
# > 1 higher variance w/ clustering
# >2 high clustering, less precise
# < 1 stratification improves precision
# consider: re-run svydesign construction to exclude Information
svymean(~ANY_RETIREMENT_ACCESS_bool, design, deff = TRUE)
# all subgroups
res2 = svyby(~ANY_RETIREMENT_ACCESS_bool, by = ~INDUSTRY_BROAD, design, svymean, deff = TRUE)
# Exclude DEFF > 2, which is Information
excl <- c(excl, res2 %>% filter(res2$DEff.ANY_RETIREMENT_ACCESS_bool > 2) %>%
.$INDUSTRY_BROAD)
incl <- setdiff(incl, excl)
# plot DEFF results
ggplot(res2, aes(x = INDUSTRY_BROAD, y = DEff.ANY_RETIREMENT_ACCESS_bool)) +
geom_bar(stat = "identity", position = position_dodge(), color = "black") +
labs(title = "Design Effect (DEFF) by Industry",
x = "Industry",
y = "Design Effect (DEFF)") +
theme_minimal()
res2 = res2 %>%
mutate(
lower_CI = ANY_RETIREMENT_ACCESS_bool - 1.96 * se,
upper_CI = ANY_RETIREMENT_ACCESS_bool + 1.96 * se
)
ggplot(res2, aes(x = INDUSTRY_BROAD, y = ANY_RETIREMENT_ACCESS_bool)) +
geom_bar(stat = "identity", position = position_dodge(), color = "black") +
geom_errorbar(aes(ymin = lower_CI, ymax = upper_CI),
width = 0.2, position = position_dodge(0.9)) +
labs(title = "Retirement access with 95% Confidence Intervals",
x = "Industry",
y = "Retirement access") +
theme_minimal()
# looks fine, no abnormal values
confint(svymean(~ANY_RETIREMENT_ACCESS_bool, design))
# final list that passed robustness checks
print(incl)
#output the final list
save(incl, file = file.path(output_path, "industry_robust.RData"))
# generate a crosswalk of state abbrs, state fips
state_fips_lookup <- data.frame(
state_fips = c(1, 2, 4, 5, 6, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19,
20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33,
34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48,
49, 50, 51, 53, 54, 55, 56),
state_abbr = c("AL", "AK", "AZ", "AR", "CA", "CO", "CT", "DE", "DC", "FL", "GA",
"HI", "ID", "IL", "IN", "IA", "KS", "KY", "LA", "ME", "MD", "MA",
"MI", "MN", "MS", "MO", "MT", "NE", "NV", "NH", "NJ", "NM", "NY",
"NC", "ND", "OH", "OK", "OR", "PA", "RI", "SC", "SD", "TN", "TX",
"UT", "VT", "VA", "WA", "WV", "WI", "WY")
)
sipp_2023 = sipp_2023 %>% left_join(state_fips_lookup, by = c("TST_INTV" = "state_fips"))
# basic state count.
sipp_2023 %>%
count(state_abbr, METRO_STATUS) %>%
filter(!is.na(METRO_STATUS)) %>% filter(METRO_STATUS != "Not identified") %>%
ggplot(aes(x = state_abbr, y = n, fill = as.factor(METRO_STATUS))) +
geom_bar(stat = "identity", position = "dodge", color = "black") + theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
labs(title = "States X metro pairs unweighted count",
x = "State", y = "n")
# how many are n<30 ?
sipp_2023 %>%
count(state_abbr, METRO_STATUS) %>%
filter(!is.na(METRO_STATUS)) %>% filter(METRO_STATUS != "Not identified") %>%
filter(n<30) %>%
ggplot(aes(x = state_abbr, y = n, fill = as.factor(METRO_STATUS))) +
geom_bar(stat = "identity", position = "dodge", color = "black") + theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
labs(title = "States X metro pairs with n < 30",
x = "State", y = "n")
# how many states does this impact?
st_met_n_under30 = sipp_2023 %>%
count(state_abbr, METRO_STATUS) %>%
filter(!is.na(METRO_STATUS)) %>%
filter(METRO_STATUS != "Not identified") %>%
filter(n<30)
length(unique(st_met_n_under30$state_abbr))
# > 50% of the sample has states with either a metro or a non-metro sample of n < 30.
# this is not a viable sub group.
# Read in wrangled SCF data (see 1. wrangle SCF 2022.R)
load(paste(output_path, "SCF_2022_WRANGLED.RData", sep = "/"))
View(scf_2022)
scf_2022 %>% mutate(across(RETIREMENT_ACCT_VAL, ~ .x * WGT, .names = "weighted_{.col}"))
scf_2022 %>% mutate(across(RETIREMENT_ACCT_VAL, ~ .x * WGT, .names = "weighted_{.col}")) %>% summarise(across(weighted_RETIREMENT_ACCT_VAL, ~ sum(.x)/sum(WGT)))
View(sipp_2023)
sipp_2023 %>% mutate(across(TVAL_RET, ~ .x * WPFINWGT, .names = "weighted_{.col}")) %>% summarise(across(weighted_TVAL_RET, ~ sum(.x)/sum(WPFINWGT)))
scf_2022 %>% mutate(across(RETIREMENT_ACCT_VAL, ~ .x * WGT, .names = "weighted_{.col}")) %>% summarise(across(weighted_RETIREMENT_ACCT_VAL, ~ sum(.x)/sum(WGT)))
sipp_2023 %>% mutate(across(TVAL_RET, ~ .x * WPFINWGT, .names = "weighted_{.col}")) %>% summarise(across(weighted_TVAL_RET, ~ sum(.x)/sum(WPFINWGT)))
scf_avg_ret <- scf_2022 %>% mutate(across(RETIREMENT_ACCT_VAL, ~ .x * WGT, .names = "weighted_{.col}")) %>% summarise(across(weighted_RETIREMENT_ACCT_VAL, ~ sum(.x)/sum(WGT)))
scf_avg_ret
scf_avg_ret <- scf_2022 %>% mutate(across(RETIREMENT_ACCT_VAL, ~ .x * WGT, .names = "weighted_{.col}")) %>% summarise(across(weighted_RETIREMENT_ACCT_VAL, ~ sum(.x)/sum(WGT))) %>%
rename(SCF_AVG_RETIREMENT_ACCOUNT = weighted_RETIREMENT_ACCT_VAL)
scf_avg_ret
avg_ret <- scf_2022 %>%
mutate(across(RETIREMENT_ACCT_VAL, ~.x * WGT, .names="weighted_{.col}")) %>%
summarise(across(weighted_RETIREMENT_ACCT_VAL, ~ sum(.x)/sum(WGT))) %>%
rename(SCF_AVG_RETIREMENT_ACCOUNT = weighted_RETIREMENT_ACCT_VAL) %>%
mutate(
SIPP_AVG_RETIREMENT_ACCOUNT = sipp_2023 %>%
mutate(across(TVAL_RET, ~.x * WPFINWGT, .names = "weighted_{.col}")) %>%
summarise(across(weighted_TVAL_RET, ~sum(.x)/sum(WPFINWGT)))
)
avg_ret
avg_ret <- scf_2022 %>%
mutate(across(RETIREMENT_ACCT_VAL, ~.x * WGT, .names="weighted_{.col}")) %>%
summarise(across(weighted_RETIREMENT_ACCT_VAL, ~ sum(.x)/sum(WGT))) %>%
rename(SCF_AVG_RETIREMENT_ACCOUNT = weighted_RETIREMENT_ACCT_VAL) %>%
mutate(
SIPP_AVG_RETIREMENT_ACCOUNT = sipp_2023 %>%
mutate(across(TVAL_RET, ~.x * WPFINWGT, .names = "weighted_{.col}")) %>%
summarise(across(weighted_TVAL_RET, ~sum(.x)/sum(WPFINWGT))) %>%
.$weighted_TVAL_RET
)
avg_ret
99024.87*1.041
avg_ret
scf_2022 %>%
mutate(across(RETIREMENT_ACCT_VAL,~.x*WGT,.names="weighted_{.col}")) %>%
select("weighted_RETIREMENT_ACCT_VAL")
z.test(scf_2022 %>%
mutate(across(RETIREMENT_ACCT_VAL,~.x*WGT,.names="weighted_{.col}")) %>%
select("weighted_RETIREMENT_ACCT_VAL"),
sipp_2023 %>%
mutate(across(TVAL_RET,~.x*WPFINWGT,.names="weighted_{.col}")) %>%
select("weighted_TVAL_RET"),
alternative = "two.sided",
conf.level = 0.95
)
install.packages("BSDA")
library(BSDA)
z.test(scf_2022 %>%
mutate(across(RETIREMENT_ACCT_VAL,~.x*WGT,.names="weighted_{.col}")) %>%
select("weighted_RETIREMENT_ACCT_VAL"),
sipp_2023 %>%
mutate(across(TVAL_RET,~.x*WPFINWGT,.names="weighted_{.col}")) %>%
select("weighted_TVAL_RET"),
alternative = "two.sided",
mu = 0,
conf.level = 0.95
)
z.test(scf_2022 %>%
mutate(across(RETIREMENT_ACCT_VAL,~.x*WGT,.names="weighted_{.col}")) %>%
select("weighted_RETIREMENT_ACCT_VAL"),
sipp_2023 %>%
mutate(across(TVAL_RET,~.x*WPFINWGT,.names="weighted_{.col}")) %>%
select("weighted_TVAL_RET"),
alternative = "two.sided",
mu = 0,
sigma.x = NULL,
sigma.y = NULL,
conf.level = 0.95
)
t.test(scf_2022 %>%
mutate(across(RETIREMENT_ACCT_VAL,~.x*WGT,.names="weighted_{.col}")) %>%
select("weighted_RETIREMENT_ACCT_VAL"),
sipp_2023 %>%
mutate(across(TVAL_RET,~.x*WPFINWGT,.names="weighted_{.col}")) %>%
select("weighted_TVAL_RET")
)
scf_2022 %>%
mutate(across(RETIREMENT_ACCT_VAL,~.x*WGT,.names="weighted_{.col}")) %>%
select("weighted_RETIREMENT_ACCT_VAL")
scf_2022 %>%
mutate(across(RETIREMENT_ACCT_VAL,~.x*WGT,.names="weighted_{.col}")) %>%
mutate(across(weighted_RETIREMENT_ACCT_VAL, ~.x/SUM(WGT))) %>%
select("weighted_RETIREMENT_ACCT_VAL")
scf_2022 %>%
mutate(across(RETIREMENT_ACCT_VAL,~.x*WGT,.names="weighted_{.col}")) %>%
mutate(across(weighted_RETIREMENT_ACCT_VAL, ~.x/sum(WGT))) %>%
select("weighted_RETIREMENT_ACCT_VAL")
weighted_scf_ret <- scf_2022 %>%
mutate(across(RETIREMENT_ACCT_VAL,~.x*WGT,.names="weighted_{.col}")) %>%
mutate(across(weighted_RETIREMENT_ACCT_VAL, ~.x/sum(WGT))) %>%
select("weighted_RETIREMENT_ACCT_VAL")
weighted_sipp_ret <- sipp_2023 %>%
mutate(across(TVAL_RET,~.x*WPFINWGT,.names="weighted_{.col}")) %>%
mutate(across(weighted_TVAL_RET, ~.x/sum(WPFINWGT))) %>%
select("weighted_TVAL_RET")
t.test(weighted_scf_ret, weighted_sipp_ret)
